// –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –≥—Ä–∏
document.addEventListener('DOMContentLoaded', () => {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ UI
    window.gameUI = new GameUI();
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≥—Ä—É
    window.game = new MultiplayerGame();
    
    // –î–æ–¥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    setupGlobalEventListeners();
    
    console.log('üéÆ –û—Å–≤—ñ—Ç–Ω—ñ–π –®–ª—è—Ö: –†–µ–≤–æ–ª—é—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!');
});

function setupGlobalEventListeners() {
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    window.addEventListener('error', (event) => {
        console.error('–ü–æ–º–∏–ª–∫–∞:', event.error);
        if (window.gameUI) {
            window.gameUI.showNotification('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.', 'error');
        }
    });
    
    // –û–±—Ä–æ–±–∫–∞ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –≤—ñ–¥—Ö–∏–ª–µ–Ω—å –ø—Ä–æ–º—ñ—Å—ñ–≤
    window.addEventListener('unhandledrejection', (event) => {
        console.error('–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ø—Ä–æ–º—ñ—Å—É:', event.reason);
        if (window.gameUI) {
            window.gameUI.showNotification('–ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç.', 'warning');
        }
    });
    
    // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
    window.addEventListener('resize', GameUtils.debounce(() => {
        // –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—É
        if (window.game && window.game.gameActive) {
            window.game.applyTransform();
        }
    }, 250));
    
    // –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à
    document.addEventListener('keydown', (event) => {
        // ESC - –∑–∞–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞
        if (event.key === 'Escape') {
            const openModal = document.querySelector('.modal-backdrop:not(.hidden)');
            if (openModal) {
                openModal.classList.add('hidden');
            }
        }
        
        // Enter - –∫–∏–Ω—É—Ç–∏ –∫—É–±–∏–∫ (—è–∫—â–æ –º–æ–∂–ª–∏–≤–æ)
        if (event.key === 'Enter' && window.game && window.game.gameActive) {
            const rollBtn = document.getElementById('roll-dice-btn');
            if (rollBtn && !rollBtn.disabled) {
                rollBtn.click();
            }
        }
        
        // R - –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≥—Ä—É
        if (event.key === 'r' || event.key === 'R') {
            if (event.ctrlKey || event.metaKey) {
                event.preventDefault();
                location.reload();
            }
        }
    });
    
    // –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –º–æ–¥–∞–ª—å–Ω–∏–º–∏ –≤—ñ–∫–Ω–∞–º–∏
    document.addEventListener('click', (event) => {
        if (event.target.classList.contains('modal-backdrop')) {
            event.target.classList.add('hidden');
        }
    });
}

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ HTML
window.startLocalGame = function() {
    if (window.game) {
        window.game.startLocalMode();
    }
};

window.startOnlineGame = function() {
    if (window.game) {
        window.game.startOnlineMode();
    }
};

window.showGameRules = function() {
    if (window.gameUI) {
        window.gameUI.showGameRules();
    }
};

window.copyRoomCode = function(code) {
    GameUtils.copyToClipboard(code);
};

window.joinRoomByCode = function(code) {
    const roomCodeInput = document.getElementById('room-code');
    if (roomCodeInput) {
        roomCodeInput.value = code;
    }
};

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏ (—Ç—ñ–ª—å–∫–∏ –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏)
if (window.APP_CONFIG && !window.APP_CONFIG.isProduction) {
    window.debugGame = {
        addPoints: (playerId, points) => {
            if (window.game && window.game.players) {
                const player = window.game.players.find(p => p.id === playerId);
                if (player) {
                    window.game.updatePoints(player, points, `Debug: +${points} –û–û`);
                }
            }
        },
        
        movePlayer: (playerId, position) => {
            if (window.game && window.game.players) {
                const player = window.game.players.find(p => p.id === playerId);
                if (player) {
                    window.game.movePlayerTo(player, position);
                }
            }
        },
        
        skipTurn: (playerId) => {
            if (window.game && window.game.players) {
                const player = window.game.players.find(p => p.id === playerId);
                if (player) {
                    player.skipTurn = true;
                }
            }
        },
        
        endGame: () => {
            if (window.game) {
                window.game.endGame();
            }
        },
        
        showState: () => {
            if (window.game) {
                console.log('Game State:', {
                    players: window.game.players,
                    currentPlayerIndex: window.game.currentPlayerIndex,
                    gameActive: window.game.gameActive,
                    isOnlineMode: window.game.isOnlineMode,
                    roomId: window.game.roomId
                });
            }
        }
    };
    
    console.log('üîß –†–µ–∂–∏–º –≤—ñ–¥–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ window.debugGame –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.');
}
