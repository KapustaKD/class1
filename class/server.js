const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');

const app = express();
const server = http.createServer(app);

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS –¥–ª—è Render.com
const io = socketIo(server, {
    cors: {
        origin: process.env.NODE_ENV === 'production' ? false : "*",
        methods: ["GET", "POST"]
    }
});

// –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏
app.use(express.static(__dirname));

// –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–ø–µ–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
if (process.env.NODE_ENV === 'production') {
    app.use((req, res, next) => {
        res.setHeader('X-Content-Type-Options', 'nosniff');
        res.setHeader('X-Frame-Options', 'DENY');
        res.setHeader('X-XSS-Protection', '1; mode=block');
        next();
    });
}

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç —Ç–∞ –≥—Ä–∞–≤—Ü—ñ–≤
const rooms = new Map();
const players = new Map();
const spectators = new Map();

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ ID
function generateId() {
    return Math.random().toString(36).substring(2, 15);
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É –∫—ñ–º–Ω–∞—Ç–∏
function generateRoomCode() {
    return Math.random().toString(36).substring(2, 8).toUpperCase();
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏
function createRoom(roomName, hostPlayer) {
    const roomId = generateRoomCode();
    const room = {
        id: roomId,
        name: roomName,
        players: [hostPlayer],
        spectators: [],
        gameState: 'waiting', // waiting, playing, finished
        currentPlayerIndex: 0,
        settings: {
            maxPlayers: 3,
            winPoints: 300,
            allowSpectators: true
        },
        gameData: {
            players: [],
            currentPlayerIndex: 0,
            gameActive: false
        }
    };
    
    rooms.set(roomId, room);
    players.set(hostPlayer.id, { ...hostPlayer, roomId, isHost: true });
    
    return room;
}

// –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏
function joinRoom(roomId, player) {
    const room = rooms.get(roomId);
    if (!room) return null;
    
    if (room.players.length >= room.settings.maxPlayers) {
        return { error: '–ö—ñ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞' };
    }
    
    room.players.push(player);
    players.set(player.id, { ...player, roomId, isHost: false });
    
    return room;
}

// –ü–æ–∫–∏–Ω—É—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É
function leaveRoom(playerId) {
    const player = players.get(playerId);
    if (!player) return;
    
    const room = rooms.get(player.roomId);
    if (!room) return;
    
    // –í–∏–¥–∞–ª—è—î–º–æ –≥—Ä–∞–≤—Ü—è –∑ –∫—ñ–º–Ω–∞—Ç–∏
    room.players = room.players.filter(p => p.id !== playerId);
    
    // –Ø–∫—â–æ —Ü–µ –±—É–≤ —Ö–æ—Å—Ç, –ø–µ—Ä–µ–¥–∞—î–º–æ –ø—Ä–∞–≤–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –≥—Ä–∞–≤—Ü—é
    if (player.isHost && room.players.length > 0) {
        room.players[0].isHost = true;
        players.set(room.players[0].id, { ...room.players[0], isHost: true });
    }
    
    // –í–∏–¥–∞–ª—è—î–º–æ –∫—ñ–º–Ω–∞—Ç—É, —è–∫—â–æ –≤–æ–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è
    if (room.players.length === 0) {
        rooms.delete(player.roomId);
    }
    
    players.delete(playerId);
    
    return room;
}

// Socket.io –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
io.on('connection', (socket) => {
    console.log(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è: ${socket.id}`);
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏
    socket.on('create_room', (data) => {
        console.log('–°–µ—Ä–≤–µ—Ä –æ—Ç—Ä–∏–º–∞–≤ –ø–æ–¥—ñ—é create_room:', data);
        try {
            const player = {
                id: socket.id,
                name: data.playerName,
                color: '#e53e3e', // –ë—É–¥–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è
                position: 0,
                points: 0,
                class: null,
                skipTurn: false,
                extraTurn: false,
                hasLost: false,
                moveModifier: 0
            };
            
            const room = createRoom(data.roomName, player);
            console.log('–ö—ñ–º–Ω–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞:', room.id);
            
            socket.join(room.id);
            socket.emit('room_created', {
                roomId: room.id,
                roomName: room.name,
                players: room.players
            });
            console.log('–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—ñ—é room_created –≥—Ä–∞–≤—Ü—é:', socket.id);
            
            // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –ø—Ä–æ –Ω–æ–≤—É –∫—ñ–º–Ω–∞—Ç—É
            io.emit('room_list_updated', Array.from(rooms.values()));
            
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏:', error);
            socket.emit('error', { message: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É' });
        }
    });
    
    // –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏
    socket.on('join_room', (data) => {
        try {
            const player = {
                id: socket.id,
                name: data.playerName,
                color: '#38b2ac', // –ë—É–¥–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è
                position: 0,
                points: 0,
                class: null,
                skipTurn: false,
                extraTurn: false,
                hasLost: false,
                moveModifier: 0
            };
            
            const result = joinRoom(data.roomCode, player);
            
            if (result && !result.error) {
                socket.join(result.id);
                socket.emit('room_joined', {
                    roomId: result.id,
                    roomName: result.name,
                    players: result.players
                });
                
                // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —ñ–Ω—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤
                socket.to(result.id).emit('player_joined', {
                    player,
                    players: result.players
                });
                
            } else {
                socket.emit('error', { message: result?.error || '–ö—ñ–º–Ω–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞' });
            }
            
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏:', error);
            socket.emit('error', { message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏' });
        }
    });
    
    // –°—Ç–∞—Ä—Ç –≥—Ä–∏
    socket.on('start_game', (data) => {
        console.log('–°–µ—Ä–≤–µ—Ä –æ—Ç—Ä–∏–º–∞–≤ –ø–æ–¥—ñ—é start_game:', data);
        const player = players.get(socket.id);
        if (!player || !player.isHost) {
            console.log('–ì—Ä–∞–≤–µ—Ü—å –Ω–µ —î —Ö–æ—Å—Ç–æ–º –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π');
            return;
        }
        
        const room = rooms.get(data.roomId);
        if (!room) {
            console.log('–ö—ñ–º–Ω–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        console.log('–ü–æ—á–∏–Ω–∞—î–º–æ –≥—Ä—É –≤ –∫—ñ–º–Ω–∞—Ç—ñ:', room.id);
        
        // –î–æ—Å—Ç—É–ø–Ω—ñ –∫–ª–∞—Å–∏
        const availableClasses = [
            { id: 'aristocrat', name: '‚öúÔ∏è –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç', startPoints: 50, moveModifier: 1 },
            { id: 'burgher', name: '‚öñÔ∏è –ú—ñ—â–∞–Ω–∏–Ω', startPoints: 20, moveModifier: 0 },
            { id: 'peasant', name: 'üå± –°–µ–ª—è–Ω–∏–Ω', startPoints: 0, moveModifier: -1 },
        ];
        
        // –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –∫–ª–∞—Å–∏ –¥–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó —Ä–æ–∑–¥–∞—á—ñ
        const shuffledClasses = [...availableClasses].sort(() => Math.random() - 0.5);
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≥—Ä—É –∑ —Ä–æ–∑–¥–∞—á–µ—é –∫–ª–∞—Å—ñ–≤
        room.gameState = 'playing';
        room.gameData.gameActive = true;
        room.gameData.players = room.players.map((p, index) => ({
            ...p,
            class: shuffledClasses[index % shuffledClasses.length],
            points: shuffledClasses[index % shuffledClasses.length].startPoints,
            position: 0,
            skipTurn: false,
            extraTurn: false,
            hasLost: false,
            moveModifier: 0
        }));
        room.gameData.currentPlayerIndex = 0;
        
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
        io.to(room.id).emit('game_started', {
            players: room.gameData.players,
            currentPlayerIndex: room.gameData.currentPlayerIndex
        });
        
        console.log('–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—ñ—é game_started –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º –≤ –∫—ñ–º–Ω–∞—Ç—ñ:', room.id);
    });
    
    // –ö–∏–¥–∞–Ω–Ω—è –∫—É–±–∏–∫–∞
    socket.on('roll_dice', (data) => {
        console.log('–°–µ—Ä–≤–µ—Ä –æ—Ç—Ä–∏–º–∞–≤ –ø–æ–¥—ñ—é roll_dice:', data);
        const player = players.get(socket.id);
        if (!player) {
            console.log('–ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –¥–ª—è roll_dice');
            return;
        }
        
        const room = rooms.get(data.roomId);
        if (!room || room.gameState !== 'playing') {
            console.log('–ö—ñ–º–Ω–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
            return;
        }
        
        const currentPlayer = room.gameData.players[room.gameData.currentPlayerIndex];
        console.log('–ü–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å:', currentPlayer.name, 'ID:', currentPlayer.id);
        console.log('–ì—Ä–∞–≤–µ—Ü—å, —è–∫–∏–π –∫–∏–¥–∞—î:', player.name, 'ID:', player.id);
        
        if (currentPlayer.id !== player.id) {
            console.log('–ù–µ —Ö—ñ–¥ —Ü—å–æ–≥–æ –≥—Ä–∞–≤—Ü—è');
            return;
        }
        
        console.log('–û–±—Ä–æ–±–ª—è—î–º–æ –∫–∏–¥–∞–Ω–Ω—è –∫—É–±–∏–∫–∞ –¥–ª—è –≥—Ä–∞–≤—Ü—è:', currentPlayer.name);
        
        const roll = Math.floor(Math.random() * 6) + 1;
        let move = roll;
        
        // –î–æ–¥–∞—î–º–æ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ –∫–ª–∞—Å—É
        if (currentPlayer.class) {
            move += currentPlayer.class.moveModifier;
            if (currentPlayer.class.id === 'peasant') {
                move = Math.max(1, move);
            }
        }
        
        console.log('–ö—É–±–∏–∫ –ø–æ–∫–∞–∑–∞–≤:', roll, '–†—É—Ö:', move);
        
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –ø—Ä–æ –∫–∏–¥–∞–Ω–Ω—è –∫—É–±–∏–∫–∞
        io.to(room.id).emit('dice_rolled', {
            playerId: currentPlayer.id,
            roll,
            move
        });
        
        console.log('–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—ñ—é dice_rolled –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º');
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
        console.log('–°—Ç–∞—Ä–∏–π currentPlayerIndex:', room.gameData.currentPlayerIndex);
        room.gameData.currentPlayerIndex = (room.gameData.currentPlayerIndex + 1) % room.gameData.players.length;
        console.log('–ù–æ–≤–∏–π currentPlayerIndex:', room.gameData.currentPlayerIndex);
        
        // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≥—Ä–∞–≤—Ü—ñ–≤, —è–∫—ñ –≤–∏–±—É–ª–∏
        while (room.gameData.players[room.gameData.currentPlayerIndex].hasWon || 
               room.gameData.players[room.gameData.currentPlayerIndex].hasLost) {
            room.gameData.currentPlayerIndex = (room.gameData.currentPlayerIndex + 1) % room.gameData.players.length;
            console.log('–ü—Ä–æ–ø—É—â–µ–Ω–æ –≤–∏–±—É–ª–æ–≥–æ –≥—Ä–∞–≤—Ü—è, –Ω–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å:', room.gameData.currentPlayerIndex);
        }
        
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –ø—Ä–æ –∑–º—ñ–Ω—É —á–µ—Ä–≥–∏
        const nextPlayer = room.gameData.players[room.gameData.currentPlayerIndex];
        console.log('–ù–∞—Å—Ç—É–ø–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å:', nextPlayer.name, 'ID:', nextPlayer.id);
        
        io.to(room.id).emit('turn_changed', {
            currentPlayerIndex: room.gameData.currentPlayerIndex,
            currentPlayer: nextPlayer
        });
        
        console.log('–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—ñ—é turn_changed –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º:', {
            currentPlayerIndex: room.gameData.currentPlayerIndex,
            currentPlayerName: nextPlayer.name
        });
    });
    
    // –ì—Ä–∞–≤–µ—Ü—å –ø–æ–∫–∏–¥–∞—î –∫—ñ–º–Ω–∞—Ç—É
    socket.on('leave_room', (data) => {
        console.log('–ì—Ä–∞–≤–µ—Ü—å –ø–æ–∫–∏–¥–∞—î –∫—ñ–º–Ω–∞—Ç—É:', data);
        const player = players.get(socket.id);
        if (!player) return;
        
        const room = rooms.get(data.roomId);
        if (!room) return;
        
        // –í–∏–¥–∞–ª—è—î–º–æ –≥—Ä–∞–≤—Ü—è –∑ –∫—ñ–º–Ω–∞—Ç–∏
        room.players = room.players.filter(p => p.id !== player.id);
        
        // –Ø–∫—â–æ —Ü–µ —Ö–æ—Å—Ç —ñ –≥—Ä–∞ –Ω–µ –ø–æ—á–∞–ª–∞—Å—è, –ø–µ—Ä–µ–¥–∞—î–º–æ –ø—Ä–∞–≤–∞ —Ö–æ—Å—Ç–∞ —ñ–Ω—à–æ–º—É –≥—Ä–∞–≤—Ü—é
        if (player.isHost && room.gameState !== 'playing' && room.players.length > 0) {
            room.players[0].isHost = true;
        }
        
        // –Ø–∫—â–æ –∫—ñ–º–Ω–∞—Ç–∞ –ø–æ—Ä–æ–∂–Ω—è, –≤–∏–¥–∞–ª—è—î–º–æ —ó—ó
        if (room.players.length === 0) {
            rooms.delete(data.roomId);
        } else {
            // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —ñ–Ω—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤
            socket.to(data.roomId).emit('player_left', {
                player,
                players: room.players
            });
        }
        
        // –í–∏–¥–∞–ª—è—î–º–æ –≥—Ä–∞–≤—Ü—è –∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
        players.delete(socket.id);
        
        console.log(`–ì—Ä–∞–≤–µ—Ü—å ${player.name} –ø–æ–∫–∏–Ω—É–≤ –∫—ñ–º–Ω–∞—Ç—É ${data.roomId}`);
    });
    
    // –ì—Ä–∞–≤–µ—Ü—å –¥–æ—Å—è–≥ –ø–µ—Ä–µ–º–æ–≥–∏
    socket.on('player_won', (data) => {
        console.log('–ì—Ä–∞–≤–µ—Ü—å –¥–æ—Å—è–≥ –ø–µ—Ä–µ–º–æ–≥–∏:', data);
        const player = players.get(socket.id);
        if (!player) return;
        
        const room = rooms.get(data.roomId);
        if (!room || room.gameState !== 'playing') return;
        
        const winningPlayer = room.gameData.players.find(p => p.id === data.playerId);
        if (!winningPlayer) return;
        
        // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –≥—Ä–∞–≤—Ü—è —è–∫ –ø–µ—Ä–µ–º–æ–∂—Ü—è
        winningPlayer.hasWon = true;
        winningPlayer.finalPosition = room.gameData.finalPositions ? room.gameData.finalPositions.length + 1 : 1;
        
        if (!room.gameData.finalPositions) {
            room.gameData.finalPositions = [];
        }
        room.gameData.finalPositions.push(winningPlayer);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –∞–∫—Ç–∏–≤–Ω—ñ –≥—Ä–∞–≤—Ü—ñ
        const activePlayers = room.gameData.players.filter(p => !p.hasWon && !p.hasLost);
        
        if (activePlayers.length <= 1) {
            // –¢—É—Ä–Ω—ñ—Ä –∑–∞–∫—ñ–Ω—á–µ–Ω–∏–π
            room.gameState = 'finished';
            io.to(room.id).emit('tournament_ended', {
                finalPositions: room.gameData.finalPositions
            });
        } else {
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–±—É–≤–∞–Ω–Ω—è
            io.to(room.id).emit('player_eliminated', {
                playerId: winningPlayer.id,
                position: winningPlayer.finalPosition,
                remainingPlayers: activePlayers.length
            });
        }
    });
    
    // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è
    socket.on('player_moved', (data) => {
        const player = players.get(socket.id);
        if (!player) return;
        
        const room = rooms.get(player.roomId);
        if (!room) return;
        
        const gamePlayer = room.gameData.players.find(p => p.id === socket.id);
        if (!gamePlayer) return;
        
        gamePlayer.position = data.position;
        
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –ø—Ä–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
        io.to(room.id).emit('player_moved', {
            playerId: socket.id,
            position: data.position
        });
    });
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≥—Ä–∏
    socket.on('game_state_update', (data) => {
        const player = players.get(socket.id);
        if (!player || !player.isHost) return;
        
        const room = rooms.get(player.roomId);
        if (!room) return;
        
        room.gameData = { ...room.gameData, ...data };
        
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        io.to(room.id).emit('game_state_update', room.gameData);
    });
    
    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ
    socket.on('chat_message', (data) => {
        const player = players.get(socket.id);
        if (!player) return;
        
        const room = rooms.get(player.roomId);
        if (!room) return;
        
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –≤ –∫—ñ–º–Ω–∞—Ç—ñ
        io.to(room.id).emit('chat_message', {
            type: 'player',
            message: data.message,
            player: { name: player.name, id: player.id }
        });
    });
    
    // PvP –∫–≤–µ—Å—Ç
    socket.on('start_pvp_quest', (data) => {
        const player = players.get(socket.id);
        if (!player) return;
        
        const room = rooms.get(player.roomId);
        if (!room) return;
        
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ PvP –∫–≤–µ—Å—Ç—É
        io.to(room.id).emit('quest_started', {
            type: 'pvp',
            playerId: socket.id,
            title: 'PvP –ö–≤–µ—Å—Ç',
            description: '–û–±–µ—Ä—ñ—Ç—å —Å—É–ø–µ—Ä–Ω–∏–∫–∞ –¥–ª—è –¥—É–µ–ª—ñ'
        });
    });
    
    // –¢–≤–æ—Ä—á–∏–π –∫–≤–µ—Å—Ç
    socket.on('start_creative_quest', (data) => {
        const player = players.get(socket.id);
        if (!player) return;
        
        const room = rooms.get(player.roomId);
        if (!room) return;
        
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ —Ç–≤–æ—Ä—á–æ–≥–æ –∫–≤–µ—Å—Ç—É
        io.to(room.id).emit('quest_started', {
            type: 'creative',
            playerId: socket.id,
            title: '–¢–≤–æ—Ä—á–∏–π –∫–≤–µ—Å—Ç',
            description: '–°—Ç–≤–æ—Ä—ñ—Ç—å —â–æ—Å—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–µ'
        });
    });
    
    // –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ —Ç–≤–æ—Ä—á–æ–º—É –∫–≤–µ—Å—Ç—ñ
    socket.on('creative_quest_vote', (data) => {
        const player = players.get(socket.id);
        if (!player) return;
        
        const room = rooms.get(player.roomId);
        if (!room) return;
        
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –ø—Ä–æ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
        io.to(room.id).emit('quest_vote', {
            playerId: socket.id,
            choice: data.choice,
            player: { name: player.name }
        });
    });
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
    socket.on('game_ended', (data) => {
        const player = players.get(socket.id);
        if (!player || !player.isHost) return;
        
        const room = rooms.get(player.roomId);
        if (!room) return;
        
        room.gameState = 'finished';
        room.gameData.gameActive = false;
        
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
        io.to(room.id).emit('game_ended', {
            winner: data.winner,
            message: data.message
        });
    });
    
    // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    socket.on('disconnect', () => {
        console.log(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è: ${socket.id}`);
        
        const room = leaveRoom(socket.id);
        if (room) {
            // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —ñ–Ω—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤
            socket.to(room.id).emit('player_left', {
                player: { id: socket.id },
                players: room.players
            });
        }
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
const HOST = process.env.HOST || '0.0.0.0';

server.listen(PORT, HOST, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ ${HOST}:${PORT}`);
    console.log(`üåê –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
    console.log(`üìä Socket.IO –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ`);
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üõë –û—Ç—Ä–∏–º–∞–Ω–æ SIGTERM, –∑–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä–∏—Ç–æ');
        process.exit(0);
    });
});

process.on('SIGINT', () => {
    console.log('üõë –û—Ç—Ä–∏–º–∞–Ω–æ SIGINT, –∑–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä–∏—Ç–æ');
        process.exit(0);
    });
});
