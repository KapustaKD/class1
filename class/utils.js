// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
class GameUtils {
    static generateRoomCode() {
        return Math.random().toString(36).substring(2, 8).toUpperCase();
    }
    
    static formatTime(timestamp) {
        return new Date(timestamp).toLocaleTimeString('uk-UA', {
            hour: '2-digit',
            minute: '2-digit'
        });
    }
    
    static sanitizeInput(input) {
        return input.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');
    }
    
    static validatePlayerName(name) {
        return name.length >= 2 && name.length <= 20 && /^[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ0-9\s]+$/.test(name);
    }
    
    static validateRoomName(name) {
        return name.length >= 3 && name.length <= 30 && /^[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ0-9\s]+$/.test(name);
    }
    
    static getRandomColor() {
        const colors = ['#e53e3e', '#38b2ac', '#ed8936', '#d69e2e', '#9f7aea', '#f56565'];
        return colors[Math.floor(Math.random() * colors.length)];
    }
    
    static debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    
    static throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }
    
    static showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
            type === 'success' ? 'bg-green-500' :
            type === 'error' ? 'bg-red-500' :
            type === 'warning' ? 'bg-yellow-500' :
            'bg-blue-500'
        } text-white`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }
    
    static copyToClipboard(text) {
        navigator.clipboard.writeText(text).then(() => {
            this.showNotification('–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É!', 'success');
        }).catch(() => {
            this.showNotification('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏', 'error');
        });
    }
    
    static formatPoints(points) {
        return points.toLocaleString('uk-UA');
    }
    
    static getPlayerRank(points) {
        if (points >= 300) return 'üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å';
        if (points >= 250) return 'ü•á –ú–∞–π—Å—Ç–µ—Ä';
        if (points >= 200) return 'ü•à –ï–∫—Å–ø–µ—Ä—Ç';
        if (points >= 150) return 'ü•â –î–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π';
        if (points >= 100) return '‚≠ê –†–æ–∑—É–º–Ω–∏–π';
        if (points >= 50) return 'üìö –£—á–µ–Ω—å';
        return 'üå± –ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å';
    }
    
    static calculateDistance(pos1, pos2) {
        return Math.abs(pos1 - pos2);
    }
    
    static getCellTypeDescription(type) {
        const descriptions = {
            'quest': '–ö–≤–µ—Å—Ç - –≤–∏–∫–æ–Ω–∞–π—Ç–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—á–æ–∫',
            'pvp-quest': 'PvP –ö–≤–µ—Å—Ç - –∑–º–∞–≥–∞–π—Ç–µ—Å—è –∑ —ñ–Ω—à–∏–º–∏ –≥—Ä–∞–≤—Ü—è–º–∏',
            'creative-quest': '–¢–≤–æ—Ä—á–∏–π –∫–≤–µ—Å—Ç - —Å—Ç–≤–æ—Ä—ñ—Ç—å —â–æ—Å—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–µ',
            'event-good': '–ü–æ–∑–∏—Ç–∏–≤–Ω–∞ –ø–æ–¥—ñ—è - –æ—Ç—Ä–∏–º–∞–π—Ç–µ –±–æ–Ω—É—Å–∏',
            'event-bad': '–ù–µ–≥–∞—Ç–∏–≤–Ω–∞ –ø–æ–¥—ñ—è - –º–æ–∂–ª–∏–≤—ñ —à—Ç—Ä–∞—Ñ–∏',
            'reincarnation': '–†–µ—ñ–Ω–∫–∞—Ä–Ω–∞—Ü—ñ—è - –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –µ–ø–æ—Ö–∏',
            'machine-uprising': '–ü–æ–≤—Å—Ç–∞–Ω–Ω—è –º–∞—à–∏–Ω - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–æ—Ä–∞–∑–∫–∞',
            'portal': '–ü–æ—Ä—Ç–∞–ª - —à–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –∑–∞ –ø–ª–∞—Ç—É',
            'alternative-path': '–û–±—Ö—ñ–¥–Ω–∏–π —à–ª—è—Ö - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç',
            'empty': '–ó–≤–∏—á–∞–π–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ - –±–µ–∑ –æ—Å–æ–±–ª–∏–≤–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤'
        };
        return descriptions[type] || '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∫–ª—ñ—Ç–∏–Ω–∫–∏';
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.GameUtils = GameUtils;
