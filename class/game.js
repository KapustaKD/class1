// –û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å –≥—Ä–∏
class EducationalPathGame {
    constructor() {
        this.BOARD_SIZE = 125;
        this.WIN_CONDITION_POINTS = 300;
        this.playerColors = ['#e53e3e', '#38b2ac', '#ed8936'];
        this.playerClasses = [
            { id: 'aristocrat', name: '‚öúÔ∏è –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç', startPoints: 50, moveModifier: 1 },
            { id: 'burgher', name: '‚öñÔ∏è –ú—ñ—â–∞–Ω–∏–Ω', startPoints: 20, moveModifier: 0 },
            { id: 'peasant', name: 'üå± –°–µ–ª—è–Ω–∏–Ω', startPoints: 0, moveModifier: -1 },
        ];
        
        this.players = [];
        this.currentPlayerIndex = 0;
        this.gameActive = false;
        this.scale = 0.5;
        this.translateX = 0;
        this.translateY = 0;
        this.isPanning = false;
        this.panStartX = 0;
        this.panStartY = 0;
        
        // –ù–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ä—Ç–∏ –∑ 5 –µ–ø–æ—Ö–∞–º–∏
        this.epochs = [
            { 
                id: 1, 
                name: "–ê–Ω—Ç–∏—á–Ω—ñ—Å—Ç—å", 
                startCell: 1, 
                endCell: 25, 
                color: "#d4a373",
                bgColor: "#8b4513",
                icon: "üèõÔ∏è",
                description: "–°—Ç–∞—Ä–æ–¥–∞–≤–Ω—ñ —Ü–∏–≤—ñ–ª—ñ–∑–∞—Ü—ñ—ó —Ç–∞ —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—è"
            },
            { 
                id: 2, 
                name: "–°–µ—Ä–µ–¥–Ω—å–æ–≤—ñ—á—á—è", 
                startCell: 26, 
                endCell: 50, 
                color: "#8a7abf",
                bgColor: "#4a4a4a",
                icon: "üè∞",
                description: "–õ–∏—Ü–∞—Ä—ñ, –∑–∞–º–∫–∏ —Ç–∞ —Ä–µ–ª—ñ–≥—ñ—è"
            },
            { 
                id: 3, 
                name: "–í—ñ–¥—Ä–æ–¥–∂–µ–Ω–Ω—è", 
                startCell: 51, 
                endCell: 75, 
                color: "#b0c4de",
                bgColor: "#2c5aa0",
                icon: "üé®",
                description: "–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ, –Ω–∞—É–∫–∞ —Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è"
            },
            { 
                id: 4, 
                name: "–ü—Ä–æ—Å–≤—ñ—Ç–Ω–∏—Ü—Ç–≤–æ", 
                startCell: 76, 
                endCell: 100, 
                color: "#90be6d",
                bgColor: "#2d5016",
                icon: "‚öóÔ∏è",
                description: "–ù–∞—É–∫–∞, —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó —Ç–∞ —ñ–Ω–¥—É—Å—Ç—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è"
            },
            { 
                id: 5, 
                name: "–°—É—á–∞—Å–Ω—ñ—Å—Ç—å", 
                startCell: 101, 
                endCell: 125, 
                color: "#f48fb1",
                bgColor: "#8b008b",
                icon: "üöÄ",
                description: "–¶–∏—Ñ—Ä–æ–≤–∞ –µ—Ä–∞ —Ç–∞ –º–∞–π–±—É—Ç–Ω—î"
            }
        ];
        
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∫–ª—ñ—Ç–∏–Ω–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ—ó –µ–ø–æ—Ö–∏
        this.epochCoordinates = this.generateEpochCoordinates();
        
        this.specialCells = {
            5: { type: 'quest' }, 
            10: { type: 'pvp-quest' }, 
            15: { type: 'event-good', effect: p => this.updatePoints(p, 20, "–í–∏–Ω–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º–Ω—ñ—Å—Ç—å! +20 –û–û.", true) }, 
            20: { type: 'creative-quest' }, 
            25: { type: 'epoch-portal', nextEpoch: 2, points: 50, description: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ –µ–ø–æ—Ö—É –ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—ñ! –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –°–µ—Ä–µ–¥–Ω—å–æ–≤—ñ—á—á—è.' },
            30: { type: 'quest' }, 
            35: { type: 'event-bad', effect: p => this.updatePoints(p, -20, "–í—Ç—Ä–∞—Ç–∞ —Ä—É–∫–æ–ø–∏—Å—ñ–≤. -20 –û–û.", true) }, 
            40: { type: 'pvp-quest' }, 
            45: { type: 'portal', target: 55, cost: 15 }, 
            50: { type: 'epoch-portal', nextEpoch: 3, points: 60, description: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ –µ–ø–æ—Ö—É –°–µ—Ä–µ–¥–Ω—å–æ–≤—ñ—á—á—è! –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –í—ñ–¥—Ä–æ–¥–∂–µ–Ω–Ω—è.' },
            55: { type: 'creative-quest' }, 
            60: { type: 'event-good', effect: p => this.updatePoints(p, 30, "–ï–ø–æ—Ö–∞ –í—ñ–¥—Ä–æ–¥–∂–µ–Ω–Ω—è! +30 –û–û.", true) }, 
            65: { type: 'pvp-quest' }, 
            70: { type: 'event-bad', effect: p => { p.skipTurn = true; this.updatePoints(p, -10); }, description: "–ó'—ó–≤ –¥–∏–≤–Ω–∏—Ö –≥—Ä–∏–±—ñ–≤. –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É —Ç–∞ -10 –û–û." }, 
            75: { type: 'epoch-portal', nextEpoch: 4, points: 70, description: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ –µ–ø–æ—Ö—É –í—ñ–¥—Ä–æ–¥–∂–µ–Ω–Ω—è! –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –ü—Ä–æ—Å–≤—ñ—Ç–Ω–∏—Ü—Ç–≤–∞.' },
            80: { type: 'quest' }, 
            85: { type: 'portal', target: 95, cost: 20 }, 
            90: { type: 'pvp-quest' }, 
            95: { type: 'event-good', effect: p => { p.extraTurn = true; }, description: "–ü—Ä–æ—Å–≤—ñ—Ç–Ω–∏—Ü—Ç–≤–æ! –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ö—ñ–¥." }, 
            100: { type: 'epoch-portal', nextEpoch: 5, points: 80, description: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ –µ–ø–æ—Ö—É –ü—Ä–æ—Å–≤—ñ—Ç–Ω–∏—Ü—Ç–≤–∞! –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –°—É—á–∞—Å–Ω–æ—Å—Ç—ñ.' },
            105: { type: 'creative-quest' }, 
            110: { type: 'event-bad', effect: p => this.movePlayerTo(p, 90), description: "–°–≤—ñ—Ç–æ–≤–∞ –≤—ñ–π–Ω–∞. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥." }, 
            115: { type: 'pvp-quest' }, 
            120: { type: 'event-good', effect: p => this.updatePoints(p, 50), description: "–¶–∏—Ñ—Ä–æ–≤–∞ —Ä–µ–≤–æ–ª—é—Ü—ñ—è! +50 –û–û." }, 
            124: { type: 'machine-uprising' },
            // –ù–æ–≤—ñ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —à–ª—è—Ö–∏
            12: { type: 'alternative-path', target: 18, cost: 5, description: "–û–±—Ö—ñ–¥–Ω–∏–π —à–ª—è—Ö –¥–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ 18 –∑–∞ 5 –û–û" },
            32: { type: 'alternative-path', target: 38, cost: 8, description: "–û–±—Ö—ñ–¥–Ω–∏–π —à–ª—è—Ö –¥–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ 38 –∑–∞ 8 –û–û" },
            52: { type: 'alternative-path', target: 58, cost: 10, description: "–û–±—Ö—ñ–¥–Ω–∏–π —à–ª—è—Ö –¥–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ 58 –∑–∞ 10 –û–û" },
            72: { type: 'alternative-path', target: 78, cost: 12, description: "–û–±—Ö—ñ–¥–Ω–∏–π —à–ª—è—Ö –¥–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ 78 –∑–∞ 12 –û–û" },
            92: { type: 'alternative-path', target: 98, cost: 15, description: "–û–±—Ö—ñ–¥–Ω–∏–π —à–ª—è—Ö –¥–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ 98 –∑–∞ 15 –û–û" },
            112: { type: 'alternative-path', target: 118, cost: 18, description: "–û–±—Ö—ñ–¥–Ω–∏–π —à–ª—è—Ö –¥–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ 118 –∑–∞ 18 –û–û" },
            // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–¥—ñ—ó
            8: { type: 'event-bad', effect: p => { p.moveModifier = -1; setTimeout(() => p.moveModifier = 0, 1); }, description: "–ë—É–ª—ñ–Ω–≥ –≤—ñ–¥ –º–∏—Å–ª–∏—Ç–µ–ª—è. –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ö—ñ–¥ –Ω–∞ 1 –º–µ–Ω—à–µ." },
            18: { type: 'event-good', effect: p => { p.moveModifier = 1; setTimeout(() => p.moveModifier = 0, 1); }, description: "–î—Ä—É–∂–±–∞ –∑ –º—É–¥—Ä–µ—Ü–µ–º. –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ö—ñ–¥ –Ω–∞ 1 –±—ñ–ª—å—à–µ." },
            28: { type: 'event-bad', effect: p => this.movePlayerTo(p, Math.max(0, p.position - 3)), description: "–í—Ç—Ä–∞—Ç–∞ –ø–∞–º'—è—Ç—ñ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ 3 –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞–∑–∞–¥." },
            38: { type: 'event-good', effect: p => this.updatePoints(p, 25), description: "–ó–Ω–∞–π—à–æ–≤ –¥—Ä–µ–≤–Ω—ñ–π –º–∞–Ω—É—Å–∫—Ä–∏–ø—Ç! +25 –û–û." },
            48: { type: 'event-bad', effect: p => { p.skipTurn = true; }, description: "–ó–∞—Ö–≤–æ—Ä—ñ–≤ –Ω–∞ —á—É–º—É. –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É." },
            58: { type: 'event-good', effect: p => { p.extraTurn = true; }, description: "–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥—É –Ω–∞–≤—á–∞–Ω–Ω—è! –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ö—ñ–¥." },
            68: { type: 'event-bad', effect: p => this.updatePoints(p, -15), description: "–°–ø–∞–ª–∏–ª–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É. -15 –û–û." },
            78: { type: 'event-good', effect: p => this.updatePoints(p, 40), description: "–°—Ç–≤–æ—Ä–µ–Ω–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç! +40 –û–û." },
            88: { type: 'event-bad', effect: p => this.movePlayerTo(p, Math.max(0, p.position - 5)), description: "–Ü–Ω–∫–≤—ñ–∑–∏—Ü—ñ—è. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ 5 –∫–ª—ñ—Ç–∏–Ω–æ–∫ –Ω–∞–∑–∞–¥." },
            98: { type: 'event-good', effect: p => this.updatePoints(p, 35), description: "–ù–∞—É–∫–æ–≤–∞ —Ä–µ–≤–æ–ª—é—Ü—ñ—è! +35 –û–û." },
            108: { type: 'event-bad', effect: p => { p.skipTurn = true; this.updatePoints(p, -25); }, description: "–¶–µ–Ω–∑—É—Ä–∞. –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É —Ç–∞ -25 –û–û." },
            118: { type: 'event-good', effect: p => { p.extraTurn = true; this.updatePoints(p, 30); }, description: "–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç! –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ö—ñ–¥ —Ç–∞ +30 –û–û." }
        };
        
        this.initializeElements();
        this.setupEventListeners();
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∫–æ–∂–Ω–æ—ó –µ–ø–æ—Ö–∏
    generateEpochCoordinates() {
        const coordinates = [];
        
        // –ï–ø–æ—Ö–∞ 1: –ê–Ω—Ç–∏—á–Ω—ñ—Å—Ç—å (1-25) - —Å–ø—ñ—Ä–∞–ª—å –≤–Ω–∏–∑—É –ª—ñ–≤–æ—Ä—É—á
        const epoch1 = this.generateSpiralPath(75, 700, 25, 0);
        coordinates.push(...epoch1);
        
        // –ï–ø–æ—Ö–∞ 2: –°–µ—Ä–µ–¥–Ω—å–æ–≤—ñ—á—á—è (26-50) - –∑–º—ñ–π–∫–∞ –≤–≥–æ—Ä—ñ –ª—ñ–≤–æ—Ä—É—á
        const epoch2 = this.generateSnakePath(325, 400, 25, 1);
        coordinates.push(...epoch2);
        
        // –ï–ø–æ—Ö–∞ 3: –í—ñ–¥—Ä–æ–¥–∂–µ–Ω–Ω—è (51-75) - –∫–æ–ª–æ –≤ —Ü–µ–Ω—Ç—Ä—ñ
        const epoch3 = this.generateCircularPath(625, 400, 25, 2);
        coordinates.push(...epoch3);
        
        // –ï–ø–æ—Ö–∞ 4: –ü—Ä–æ—Å–≤—ñ—Ç–Ω–∏—Ü—Ç–≤–æ (76-100) - –∑–º—ñ–π–∫–∞ –≤–≥–æ—Ä—ñ –ø—Ä–∞–≤–æ—Ä—É—á
        const epoch4 = this.generateSnakePath(750, 350, 25, 3);
        coordinates.push(...epoch4);
        
        // –ï–ø–æ—Ö–∞ 5: –°—É—á–∞—Å–Ω—ñ—Å—Ç—å (101-125) - –ª—ñ–Ω—ñ—è –≤–Ω–∏–∑—É –ø—Ä–∞–≤–æ—Ä—É—á
        const epoch5 = this.generateLinearPath(1025, 400, 25, 4);
        coordinates.push(...epoch5);
        
        return coordinates;
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–ø—ñ—Ä–∞–ª—å–Ω–æ–≥–æ —à–ª—è—Ö—É
    generateSpiralPath(startX, startY, count, epochIndex) {
        const coords = [];
        let x = startX, y = startY;
        let radius = 50;
        let angle = 0;
        
        for (let i = 0; i < count; i++) {
            coords.push({ top: y, left: x, epoch: epochIndex });
            
            // –°–ø—ñ—Ä–∞–ª—å–Ω–∏–π —Ä—É—Ö
            angle += Math.PI / 8;
            radius += 2;
            x = startX + Math.cos(angle) * radius;
            y = startY + Math.sin(angle) * radius;
        }
        
        return coords;
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–º—ñ–π–∫–æ–≤–æ–≥–æ —à–ª—è—Ö—É
    generateSnakePath(startX, startY, count, epochIndex) {
        const coords = [];
        let x = startX, y = startY;
        let direction = 1;
        
        for (let i = 0; i < count; i++) {
            coords.push({ top: y, left: x, epoch: epochIndex });
            
            // –ó–º—ñ–π–∫–æ–≤–∏–π —Ä—É—Ö
            if (i % 5 === 4) {
                direction *= -1;
                y += 30;
            } else {
                x += direction * 40;
            }
        }
        
        return coords;
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫—Ä—É–≥–æ–≤–æ–≥–æ —à–ª—è—Ö—É
    generateCircularPath(centerX, centerY, count, epochIndex) {
        const coords = [];
        const radius = 100;
        
        for (let i = 0; i < count; i++) {
            const angle = (i / count) * 2 * Math.PI;
            const x = centerX + Math.cos(angle) * radius;
            const y = centerY + Math.sin(angle) * radius;
            coords.push({ top: y, left: x, epoch: epochIndex });
        }
        
        return coords;
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ —à–ª—è—Ö—É
    generateLinearPath(startX, startY, count, epochIndex) {
        const coords = [];
        
        for (let i = 0; i < count; i++) {
            const x = startX + i * 30;
            const y = startY + Math.sin(i * 0.3) * 20;
            coords.push({ top: y, left: x, epoch: epochIndex });
        }
        
        return coords;
    }
    
    initializeElements() {
        this.gameViewport = document.getElementById('game-viewport');
        this.gameBoardContainer = document.getElementById('game-board-container');
        this.gameBoard = document.getElementById('game-board');
        this.rollDiceBtn = document.getElementById('roll-dice-btn');
        this.gameLog = document.getElementById('game-log');
        this.currentPlayerNameEl = document.getElementById('current-player-name');
        this.currentPlayerClassEl = document.getElementById('current-player-class');
        this.currentPlayerPointsEl = document.getElementById('current-player-points');
        this.leaderboardEl = document.getElementById('leaderboard');
        this.diceInner = document.getElementById('dice-inner');
        this.pathSvg = document.getElementById('path-svg');
        this.rulesModal = document.getElementById('rules-modal');
        this.showSetupBtn = document.getElementById('show-setup-btn');
        this.startModal = document.getElementById('start-modal');
        this.playerCountSelect = document.getElementById('player-count');
        this.playerSetupContainer = document.getElementById('player-setup-container');
        this.startGameBtn = document.getElementById('start-game-btn');
        this.questModal = document.getElementById('quest-modal');
        this.questModalContent = document.getElementById('quest-modal-content');
    }
    
    setupEventListeners() {
        // –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–¥—ñ—ó –≥—Ä–∏
        this.showSetupBtn.addEventListener('click', () => {
            this.rulesModal.classList.add('hidden');
            this.startModal.classList.remove('hidden');
        });
        
        this.playerCountSelect.addEventListener('change', () => this.setupPlayerInputs());
        this.startGameBtn.addEventListener('click', () => this.initializeGame());
        this.rollDiceBtn.addEventListener('click', () => {
            if (this.gameActive) this.rollTheDice();
        });
        
        // –ó—É–º —ñ –ø–∞–Ω–æ—Ä–∞–º–∞
        this.gameViewport.addEventListener('wheel', (e) => this.handleZoom(e));
        this.gameViewport.addEventListener('mousedown', (e) => this.startPanning(e));
        window.addEventListener('mousemove', (e) => this.handlePanning(e));
        window.addEventListener('mouseup', () => this.stopPanning());
        
        this.setupPlayerInputs();
        this.applyTransform();
    }
    
    setupPlayerInputs() {
        const count = this.playerCountSelect.value;
        this.playerSetupContainer.innerHTML = '';
        for (let i = 0; i < count; i++) {
            this.playerSetupContainer.innerHTML += `
                <div class="mt-4 p-3 border rounded-lg" style="border-color: ${this.playerColors[i]};">
                    <h3 class="text-xl font-semibold mb-2" style="color: ${this.playerColors[i]};">–ì—Ä–∞–≤–µ—Ü—å ${i + 1}</h3>
                    <div class="mb-2">
                        <label for="player-name-${i}" class="block font-medium">–Ü–º'—è:</label>
                        <input type="text" id="player-name-${i}" value="–ì—Ä–∞–≤–µ—Ü—å ${i + 1}" class="w-full p-2 border border-gray-300 rounded text-black">
                    </div>
                    <div>
                        <label for="player-class-${i}" class="block font-medium">–ö–ª–∞—Å:</label>
                        <select id="player-class-${i}" class="w-full p-2 border border-gray-300 rounded text-black">
                            ${this.playerClasses.map(c => `<option value="${c.id}">${c.name}</option>`).join('')}
                        </select>
                    </div>
                </div>
            `;
        }
    }
    
    initializeGame() {
        const count = this.playerCountSelect.value;
        this.players = [];
        for (let i = 0; i < count; i++) {
            const name = document.getElementById(`player-name-${i}`).value;
            const classId = document.getElementById(`player-class-${i}`).value;
            const playerClass = this.playerClasses.find(c => c.id === classId);
            this.players.push({
                id: i + 1,
                name,
                color: this.playerColors[i],
                position: 0,
                class: playerClass,
                points: playerClass.startPoints,
                skipTurn: false,
                extraTurn: false,
                hasLost: false,
                moveModifier: 0
            });
        }
        
        this.createBoard();
        this.gameActive = true;
        this.currentPlayerIndex = 0;
        this.updateUI();
        this.startModal.classList.add('hidden');
        this.logMessage(`–ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—è! –ú–µ—Ç–∞: ${this.WIN_CONDITION_POINTS} –û–û.`, 'system');
        this.logMessage(`–•—ñ–¥ –≥—Ä–∞–≤—Ü—è ${this.players[this.currentPlayerIndex].name}.`, 'turn');
        
        const startCell = document.getElementById('cell-0');
        this.centerViewOn(startCell);
    }
    
    createBoard() {
        this.gameBoard.innerHTML = '';
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–æ–Ω–æ–≤—ñ –æ–±–ª–∞—Å—Ç—ñ –¥–ª—è –∫–æ–∂–Ω–æ—ó –µ–ø–æ—Ö–∏
        this.createEpochBackgrounds();
        
        // –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞
        const startCell = document.createElement('div');
        startCell.id = 'cell-0';
        startCell.className = 'board-cell start';
        startCell.style.top = '700px';
        startCell.style.left = '25px';
        startCell.innerHTML = '<span>–°–¢–ê–†–¢</span>';
        this.gameBoard.appendChild(startCell);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –µ–ø–æ—Ö–∏
        this.epochCoordinates.forEach((coord, i) => {
            const cellNum = i + 1;
            const cell = document.createElement('div');
            cell.id = `cell-${cellNum}`;
            
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ –µ–ø–æ—Ö—É –¥–ª—è –∫–ª—ñ—Ç–∏–Ω–∫–∏
            const epoch = this.epochs[coord.epoch];
            const special = this.specialCells[cellNum];
            
            let cellClass = special ? special.type : 'empty';
            if (cellNum >= 121 && cellNum <= 123) cellClass += ' future';
            if (cellNum === this.BOARD_SIZE) cellClass = 'finish';
            
            cell.className = `board-cell ${cellClass} epoch-${epoch.id}`;
            cell.style.top = `${coord.top}px`;
            cell.style.left = `${coord.left}px`;
            cell.innerHTML = `<span>${cellNum === this.BOARD_SIZE ? 'F' : cellNum}</span>`;
            
            // –î–æ–¥–∞—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É –∑ –µ–ø–æ—Ö–æ—é
            cell.title = `${epoch.name} - ${epoch.description}`;
            
            this.gameBoard.appendChild(cell);
        });
        
        this.drawEpochPaths();
        
        // –§—ñ—à–∫–∏ –≥—Ä–∞–≤—Ü—ñ–≤
        this.players.forEach(p => {
            const pawn = document.createElement('div');
            pawn.id = `pawn-${p.id}`;
            pawn.className = 'player-pawn';
            pawn.style.backgroundColor = p.color;
            startCell.appendChild(pawn);
        });
    }
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ–Ω–æ–≤–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –µ–ø–æ—Ö
    createEpochBackgrounds() {
        this.epochs.forEach((epoch, index) => {
            const bg = document.createElement('div');
            bg.id = `epoch-bg-${epoch.id}`;
            bg.className = 'epoch-background';
            bg.style.backgroundColor = epoch.bgColor;
            bg.style.opacity = '0.3';
            bg.style.borderRadius = '20px';
            bg.style.border = `3px solid ${epoch.color}`;
            
            // –ü–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –µ–ø–æ—Ö–∏
            const positions = [
                { top: '600px', left: '25px', width: '300px', height: '200px' }, // –ê–Ω—Ç–∏—á–Ω—ñ—Å—Ç—å
                { top: '50px', left: '300px', width: '300px', height: '200px' }, // –°–µ—Ä–µ–¥–Ω—å–æ–≤—ñ—á—á—è
                { top: '300px', left: '600px', width: '200px', height: '200px' }, // –í—ñ–¥—Ä–æ–¥–∂–µ–Ω–Ω—è
                { top: '50px', left: '700px', width: '300px', height: '200px' }, // –ü—Ä–æ—Å–≤—ñ—Ç–Ω–∏—Ü—Ç–≤–æ
                { top: '600px', left: '1000px', width: '300px', height: '200px' } // –°—É—á–∞—Å–Ω—ñ—Å—Ç—å
            ];
            
            const pos = positions[index];
            bg.style.top = pos.top;
            bg.style.left = pos.left;
            bg.style.width = pos.width;
            bg.style.height = pos.height;
            
            // –î–æ–¥–∞—î–º–æ —ñ–∫–æ–Ω–∫—É –µ–ø–æ—Ö–∏
            bg.innerHTML = `<div style="position: absolute; top: 10px; left: 10px; font-size: 24px;">${epoch.icon}</div>`;
            
            this.gameBoard.appendChild(bg);
        });
    }
    
    // –ú–∞–ª—é–≤–∞–Ω–Ω—è —à–ª—è—Ö—ñ–≤ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–æ–∂–Ω–æ—ó –µ–ø–æ—Ö–∏
    drawEpochPaths() {
        this.pathSvg.innerHTML = '';
        
        // –ú–∞–ª—é—î–º–æ —à–ª—è—Ö–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –µ–ø–æ—Ö–∏ –æ–∫—Ä–µ–º–æ
        this.epochs.forEach((epoch, epochIndex) => {
            const epochCells = this.epochCoordinates.filter(coord => coord.epoch === epochIndex);
            if (epochCells.length === 0) return;
            
            let pathData = '';
            for (let i = 0; i < epochCells.length - 1; i++) {
                const p1 = { x: epochCells[i].left, y: epochCells[i].top };
                const p2 = { x: epochCells[i+1].left, y: epochCells[i+1].top };
                
                if (i === 0) pathData += `M ${p1.x} ${p1.y} `;
                pathData += `L ${p2.x} ${p2.y} `;
            }
            
            if (pathData) {
                let path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                path.setAttribute('d', pathData);
                path.setAttribute('fill', 'none');
                path.setAttribute('stroke', epoch.color);
                path.setAttribute('stroke-width', '8');
                path.setAttribute('stroke-dasharray', '15 10');
                path.setAttribute('stroke-linecap', 'round');
                path.setAttribute('opacity', '0.7');
                this.pathSvg.appendChild(path);
            }
        });
    }
    
    drawPath() {
        this.pathSvg.innerHTML = '';
        
        // –ú–∞–ª—é—î–º–æ –ª—ñ–Ω—ñ—ó —Ç—ñ–ª—å–∫–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–æ–∂–Ω–æ—ó —Å–µ–∫—Ü—ñ—ó
        const sectionBoundaries = [0, 25, 50, 75, 100, 124]; // –ú–µ–∂—ñ —Å–µ–∫—Ü—ñ–π
        const allCoords = [{top: 700, left: 25}, ...this.cellCoordinates];
        
        for (let section = 0; section < sectionBoundaries.length - 1; section++) {
            const startIdx = sectionBoundaries[section];
            const endIdx = sectionBoundaries[section + 1];
            
            if (startIdx >= allCoords.length) break;
            
            let pathData = '';
            for (let i = startIdx; i < endIdx && i < allCoords.length - 1; i++) {
                const p1 = { x: allCoords[i].left, y: allCoords[i].top };
                const p2 = { x: allCoords[i+1].left, y: allCoords[i+1].top };
                if (i === startIdx) pathData += `M ${p1.x} ${p1.y} `;
                pathData += `L ${p2.x} ${p2.y} `;
            }
            
            if (pathData) {
                let path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                path.setAttribute('d', pathData);
                path.setAttribute('fill', 'none');
                path.setAttribute('stroke', 'rgba(255, 255, 255, 0.4)');
                path.setAttribute('stroke-width', '10');
                path.setAttribute('stroke-dasharray', '20 10');
                path.setAttribute('stroke-linecap', 'round');
                this.pathSvg.appendChild(path);
            }
        }
    }
    
    // –ó—É–º —ñ –ø–∞–Ω–æ—Ä–∞–º–∞
    applyTransform() {
        this.gameBoardContainer.style.transform = `translate(${this.translateX}px, ${this.translateY}px) scale(${this.scale})`;
    }
    
    handleZoom(e) {
        e.preventDefault();
        const rect = this.gameViewport.getBoundingClientRect();
        const mouseX = e.clientX - rect.left;
        const mouseY = e.clientY - rect.top;
        const oldScale = this.scale;
        const delta = e.deltaY > 0 ? 0.9 : 1.1;
        this.scale = Math.max(0.3, Math.min(2, this.scale * delta));
        this.translateX = mouseX - (mouseX - this.translateX) * (this.scale / oldScale);
        this.translateY = mouseY - (mouseY - this.translateY) * (this.scale / oldScale);
        this.applyTransform();
    }
    
    startPanning(e) {
        this.isPanning = true;
        this.panStartX = e.clientX;
        this.panStartY = e.clientY;
        this.gameViewport.style.cursor = 'grabbing';
        this.gameBoardContainer.style.transition = 'none';
    }
    
    handlePanning(e) {
        if (!this.isPanning) return;
        const dx = e.clientX - this.panStartX;
        const dy = e.clientY - this.panStartY;
        this.translateX += dx;
        this.translateY += dy;
        this.panStartX = e.clientX;
        this.panStartY = e.clientY;
        this.applyTransform();
    }
    
    stopPanning() {
        this.isPanning = false;
        this.gameViewport.style.cursor = 'grab';
        this.gameBoardContainer.style.transition = 'transform 0.5s ease';
    }
    
    centerViewOn(element) {
        const viewportRect = this.gameViewport.getBoundingClientRect();
        const targetX = viewportRect.width / 2;
        const targetY = viewportRect.height / 2;
        const elementX = element.offsetLeft + element.offsetWidth / 2;
        const elementY = element.offsetTop + element.offsetHeight / 2;
        this.translateX = targetX - (elementX * this.scale);
        this.translateY = targetY - (elementY * this.scale);
        this.applyTransform();
    }
    
    // –Ü–≥—Ä–æ–≤–∞ –ª–æ–≥—ñ–∫–∞
    async rollTheDice() {
        this.rollDiceBtn.disabled = true;
        let roll = Math.floor(Math.random() * 6) + 1;
        const player = this.players[this.currentPlayerIndex];
        let move = roll + player.class.moveModifier + player.moveModifier;
        if (player.class.id === 'peasant') move = Math.max(1, move);
        
        this.logMessage(`${player.name} (${player.class.name}) –≤–∏–∫–∏–Ω—É–≤ ${roll}. –†—É—Ö: ${move}.`, 'roll');
        
        const rotations = {
            1: 'rotateY(0deg)',
            2: 'rotateY(-90deg)',
            3: 'rotateY(-180deg)',
            4: 'rotateY(90deg)',
            5: 'rotateX(-90deg)',
            6: 'rotateX(90deg)'
        };
        
        this.diceInner.style.transform = `rotateX(${Math.random()*360}deg) rotateY(${Math.random()*360}deg)`;
        setTimeout(async () => {
            this.diceInner.style.transform = `${rotations[roll]} translateZ(40px)`;
            await this.movePlayer(player, move);
        }, 1000);
    }
    
    async movePlayer(player, steps) {
        const startPos = player.position;
        const endPos = Math.min(startPos + steps, this.BOARD_SIZE);
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É –ø–ª–∞–≤–Ω—É –∞–Ω—ñ–º–∞—Ü—ñ—é
        await this.animatePawnMovement(player, startPos, endPos, steps);
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –≥—Ä–∞–≤—Ü—è
        player.position = endPos;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–¥—ñ—ó –Ω–∞ –∫—ñ–Ω—Ü–µ–≤—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ
        this.checkCell(player);
    }
    
    async movePlayerTo(player, position) {
        player.position = position;
        this.updatePawnPosition(player);
        await new Promise(res => setTimeout(res, 300));
        this.logMessage(`${player.name} –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫—É ${player.position}.`, 'system');
        this.checkCell(player);
    }
    
    checkCell(player) {
        const cellData = this.specialCells[player.position];
        if (cellData) {
            this.handleSpecialCell(player, cellData);
        } else {
            this.nextTurn();
        }
    }
    
    handleSpecialCell(player, cellData) {
        this.logMessage(`${player.name} –ø–æ—Ç—Ä–∞–ø–∏–≤ –Ω–∞ –ø–æ–¥—ñ—é!`, 'event');
        
        switch(cellData.type) {
            case 'quest':
                this.triggerRandomQuest(player);
                break;
            case 'pvp-quest':
                this.triggerPvpQuest(player);
                break;
            case 'creative-quest':
                this.triggerCreativeQuest(player);
                break;
            case 'epoch-portal':
                this.showQuestModal('–ü–æ—Ä—Ç–∞–ª –º—ñ–∂ –µ–ø–æ—Ö–∞–º–∏!', `${cellData.description} –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –µ–ø–æ—Ö–∏?`, [
                    { text: '–¢–∞–∫', callback: () => { 
                        this.updatePoints(player, cellData.points, cellData.description);
                        this.teleportToNextEpoch(player, cellData.nextEpoch);
                        this.questModal.classList.add('hidden');
                    }},
                    { text: '–ù—ñ', callback: () => { 
                        this.questModal.classList.add('hidden'); 
                        this.nextTurn(); 
                    }}
                ]);
                break;
            case 'machine-uprising':
                player.hasLost = true;
                this.endGame(null, `${player.name} –ø–æ–≥–ª–∏–Ω—É–ª–æ –ø–æ–≤—Å—Ç–∞–Ω–Ω—è –º–∞—à–∏–Ω!`);
                break;
            case 'portal':
                this.showQuestModal('–¢–∞—î–º–Ω–∏–π –ø–æ—Ä—Ç–∞–ª!', `–†–∏–∑–∏–∫–Ω—É—Ç–∏ —Ç–∞ —Å—Ç—Ä–∏–±–Ω—É—Ç–∏ –Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫—É ${cellData.target} –∑–∞ ${cellData.cost} –û–û?`, [
                    { text: '–¢–∞–∫', callback: () => { this.updatePoints(player, -cellData.cost); this.movePlayerTo(player, cellData.target); this.questModal.classList.add('hidden'); }},
                    { text: '–ù—ñ', callback: () => { this.questModal.classList.add('hidden'); this.nextTurn(); }}
                ]);
                break;
            case 'alternative-path':
                this.showQuestModal('–û–±—Ö—ñ–¥–Ω–∏–π —à–ª—è—Ö!', `${cellData.description}. –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏?`, [
                    { text: '–¢–∞–∫', callback: () => { this.updatePoints(player, -cellData.cost); this.movePlayerTo(player, cellData.target); this.questModal.classList.add('hidden'); }},
                    { text: '–ù—ñ', callback: () => { this.questModal.classList.add('hidden'); this.nextTurn(); }}
                ]);
                break;
            default:
                if (cellData.effect) cellData.effect(player);
                setTimeout(() => this.nextTurn(), 1000);
                break;
        }
    }
    
    // –ö–≤–µ—Å—Ç–∏ —Ç–∞ –ø–æ–¥—ñ—ó
    triggerRandomQuest(player) {
        const questTypes = ['simple', 'pvp', 'creative'];
        const questType = questTypes[Math.floor(Math.random() * questTypes.length)];
        
        if (questType === 'simple') {
            const simpleQuests = [
                { title: '–ó–Ω–∞–π—à–æ–≤ —Å—Ç–∞—Ä–æ–≤–∏–Ω–Ω—É –∫–Ω–∏–≥—É!', reward: 15, description: '–í–∏ –∑–Ω–∞–π—à–ª–∏ —Ü—ñ–Ω–Ω—É –∫–Ω–∏–≥—É –≤ –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ.' },
                { title: '–î–æ–ø–æ–º—ñ–≥ –≤—á–∏—Ç–µ–ª—é!', reward: 20, description: '–í–∏ –¥–æ–ø–æ–º–æ–≥–ª–∏ –≤—á–∏—Ç–µ–ª—é –∑ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—î—é —É—Ä–æ–∫—É.' },
                { title: '–í–∏–≤—á–∏–≤ –Ω–æ–≤—É –º–æ–≤—É!', reward: 25, description: '–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–≤—á–∏–ª–∏ –æ—Å–Ω–æ–≤–∏ –Ω–æ–≤–æ—ó –º–æ–≤–∏.' },
                { title: '–°—Ç–≤–æ—Ä–∏–≤ –Ω–∞—É–∫–æ–≤–∏–π –ø—Ä–æ–µ–∫—Ç!', reward: 30, description: '–í–∞—à –ø—Ä–æ–µ–∫—Ç –æ—Ç—Ä–∏–º–∞–≤ –≤–∏–∑–Ω–∞–Ω–Ω—è.' },
                { title: '–ü–µ—Ä–µ–º—ñ–≥ —É –æ–ª—ñ–º–ø—ñ–∞–¥—ñ!', reward: 40, description: '–í–∏ –ø–æ—Å—ñ–ª–∏ –ø–µ—Ä—à–µ –º—ñ—Å—Ü–µ –≤ –æ–ª—ñ–º–ø—ñ–∞–¥—ñ.' }
            ];
            const quest = simpleQuests[Math.floor(Math.random() * simpleQuests.length)];
            this.updatePoints(player, quest.reward, quest.title);
            this.showQuestModal(quest.title, quest.description, [
                { text: '–î–∞–ª—ñ', callback: () => {
                    this.questModal.classList.add('hidden');
                    this.logMessage(`${player.name} –æ—Ç—Ä–∏–º–∞–≤ ${quest.reward} –û–û –∑–∞ ${quest.title.toLowerCase()}.`, 'system');
                    this.nextTurn();
                }}
            ]);
        } else if (questType === 'pvp') {
            this.triggerPvpQuest(player);
        } else {
            this.triggerCreativeQuest(player);
        }
    }
    
    // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    updatePoints(player, amount, reason = "", showModal = false) {
        player.points += amount;
        if (reason) this.logMessage(`${player.name} ${amount > 0 ? '+' : ''}${amount} –û–û. (${reason})`, 'system');
        this.updateUI();
        
        if (showModal && reason) {
            this.showQuestModal(reason, `${player.name} –æ—Ç—Ä–∏–º–∞–≤ ${amount > 0 ? '+' : ''}${amount} –û—á–æ–∫ –û—Å–≤—ñ—Ç–∏!`, [
                { text: '–î–∞–ª—ñ', callback: () => { this.questModal.classList.add('hidden'); this.nextTurn(); }}
            ]);
        }
        
        if (player.points >= this.WIN_CONDITION_POINTS) {
            this.endGame(player);
        }
    }
    
    nextTurn() {
        if (!this.gameActive) return;
        const player = this.players[this.currentPlayerIndex];
        
        if (player.extraTurn) {
            player.extraTurn = false;
            this.logMessage(`${player.name} –æ—Ç—Ä–∏–º—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ö—ñ–¥!`, 'turn');
            this.rollDiceBtn.disabled = false;
            return;
        }
        
        if (player.skipTurn) {
            player.skipTurn = false;
            this.logMessage(`${player.name} –ø—Ä–æ–ø—É—Å–∫–∞—î —Ö—ñ–¥.`, 'turn');
            this.showQuestModal('–ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É', `${player.name} –ø—Ä–æ–ø—É—Å–∫–∞—î —Ü–µ–π —Ö—ñ–¥ —á–µ—Ä–µ–∑ –ø–æ–¥—ñ—é.`, [
                { text: '–ó—Ä–æ–∑—É–º—ñ–ª–æ', callback: () => { this.questModal.classList.add('hidden'); this.nextTurn(); }}
            ]);
            return;
        }
        
        do {
            this.currentPlayerIndex = (this.currentPlayerIndex + 1) % this.players.length;
        } while (this.players[this.currentPlayerIndex].hasLost);
        
        this.updateUI();
        this.logMessage(`–¢–µ–ø–µ—Ä —Ö—ñ–¥ –≥—Ä–∞–≤—Ü—è ${this.players[this.currentPlayerIndex].name}.`, 'turn');
        this.rollDiceBtn.disabled = false;
    }
    
    updateUI() {
        const player = this.players[this.currentPlayerIndex];
        this.currentPlayerNameEl.textContent = player.name;
        this.currentPlayerNameEl.style.color = player.color;
        this.currentPlayerClassEl.textContent = player.class ? player.class.name : '‚Äî';
        this.currentPlayerPointsEl.textContent = player.points;
        this.leaderboardEl.innerHTML = `<h3 class="text-lg font-semibold mt-2">–¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤</h3>` + 
            this.players.filter(p => !p.hasLost).sort((a,b) => b.points - a.points).map(p => 
                `<div style="color:${p.color};">${p.name}: ${p.points} –û–û</div>`
            ).join('');
    }
    
    updatePawnPosition(player) {
        const pawn = document.getElementById(`pawn-${player.id}`);
        const cell = document.getElementById(`cell-${player.position}`);
        if (cell && pawn) {
            cell.appendChild(pawn);
            this.centerViewOn(cell);
        }
    }
    
    // –ü–ª–∞–≤–Ω–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è —Ä—É—Ö—É —Ñ—ñ—à–∫–∏ –ø–æ–∫—Ä–æ–∫–æ–≤–æ
    async animatePawnMovement(player, fromPosition, toPosition, steps) {
        console.log(`–ê–Ω—ñ–º–∞—Ü—ñ—è —Ä—É—Ö—É ${player.name} –∑ ${fromPosition} –¥–æ ${toPosition}, –∫—Ä–æ–∫—ñ–≤: ${steps}`);
        
        const pawn = document.getElementById(`pawn-${player.id}`);
        if (!pawn) return;
        
        // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É –∫–∏–¥–∞–Ω–Ω—è –∫—É–±–∏–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω—ñ–º–∞—Ü—ñ—ó
        this.rollDiceBtn.disabled = true;
        this.rollDiceBtn.style.opacity = '0.5';
        
        // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å —Ä—É—Ö—É
        pawn.classList.add('moving');
        
        // –Ø–∫—â–æ —Ä—É—Ö –¥–∞–ª–µ–∫–∏–π, –¥–æ–¥–∞—î–º–æ –µ—Ñ–µ–∫—Ç –≤—ñ—Ç—Ä—É
        if (steps > 3) {
            pawn.classList.add('wind-effect');
        }
        
        try {
            // –†—É—Ö–∞—î–º–æ—Å—è –ø–æ–∫—Ä–æ–∫–æ–≤–æ
            for (let i = 1; i <= steps; i++) {
                const currentPosition = fromPosition + i;
                
                // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ —Ñ—ñ—à–∫—É –Ω–∞ –ø–æ—Ç–æ—á–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É
                await this.movePawnToCell(pawn, currentPosition);
                
                // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫—Ä–æ–∫–∞–º–∏
                await this.sleep(250);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–¥—ñ—ó –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ
                if (i === steps) {
                    // –û—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–¥—ñ—ó
                    const cellData = this.specialCells[currentPosition];
                    if (cellData) {
                        console.log(`–ì—Ä–∞–≤–µ—Ü—å ${player.name} –ø–æ—Ç—Ä–∞–ø–∏–≤ –Ω–∞ –ø–æ–¥—ñ—é –Ω–∞ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ ${currentPosition}`);
                        await this.handleSpecialCell(player, cellData);
                    }
                }
            }
            
            // –î–æ–¥–∞—î–º–æ –µ—Ñ–µ–∫—Ç –ø—Ä–∏–∑–µ–º–ª–µ–Ω–Ω—è
            pawn.classList.remove('moving');
            pawn.classList.add('landing');
            
            // –î–æ–¥–∞—î–º–æ —Å–ª—ñ–¥
            pawn.classList.add('trail');
            
            // –û—á–∏—â—É—î–º–æ –µ—Ñ–µ–∫—Ç–∏ –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
            setTimeout(() => {
                pawn.classList.remove('landing', 'trail', 'wind-effect');
            }, 600);
            
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω—ñ–º–∞—Ü—ñ—ó:', error);
        } finally {
            // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É
            this.rollDiceBtn.disabled = false;
            this.rollDiceBtn.style.opacity = '1';
        }
    }
    
    // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ñ—ñ—à–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É
    async movePawnToCell(pawn, cellPosition) {
        return new Promise((resolve) => {
            const targetCell = document.getElementById(`cell-${cellPosition}`);
            if (!targetCell) {
                resolve();
                return;
            }
            
            // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ —Ñ—ñ—à–∫—É –≤ –Ω–æ–≤—É –∫–ª—ñ—Ç–∏–Ω–∫—É
            targetCell.appendChild(pawn);
            
            // –¶–µ–Ω—Ç—Ä—É—î–º–æ –≤–∏–¥ –Ω–∞ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ
            this.centerViewOn(targetCell);
            
            // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è CSS transition
            setTimeout(resolve, 250);
        });
    }
    
    // –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –∑–∞—Ç—Ä–∏–º–∫–∏
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    // –¢–µ–ª–µ–ø–æ—Ä—Ç –º—ñ–∂ –µ–ø–æ—Ö–∞–º–∏
    async teleportToNextEpoch(player, nextEpochId) {
        const nextEpoch = this.epochs.find(e => e.id === nextEpochId);
        if (!nextEpoch) return;
        
        console.log(`${player.name} —Ç–µ–ª–µ–ø–æ—Ä—Ç—É—î—Ç—å—Å—è –¥–æ –µ–ø–æ—Ö–∏ ${nextEpoch.name}`);
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é —Ç–µ–ª–µ–ø–æ—Ä—Ç—É
        await this.showTeleportAnimation(player, nextEpoch);
        
        // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –≥—Ä–∞–≤—Ü—è –Ω–∞ –ø–µ—Ä—à—É –∫–ª—ñ—Ç–∏–Ω–∫—É –Ω–æ–≤–æ—ó –µ–ø–æ—Ö–∏
        const newPosition = nextEpoch.startCell;
        const oldPosition = player.position;
        
        player.position = newPosition;
        
        // –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–º—ñ—â—É—î–º–æ —Ñ—ñ—à–∫—É
        await this.movePawnToCell(document.getElementById(`pawn-${player.id}`), newPosition);
        
        // –¶–µ–Ω—Ç—Ä—É—î–º–æ –∫–∞–º–µ—Ä—É –Ω–∞ –Ω–æ–≤—ñ–π –µ–ø–æ—Å—ñ
        this.centerViewOnEpoch(nextEpochId);
        
        this.logMessage(`${player.name} —Ç–µ–ª–µ–ø–æ—Ä—Ç—É–≤–∞–≤—Å—è –¥–æ –µ–ø–æ—Ö–∏ ${nextEpoch.name}!`, 'system');
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–¥—ñ—ó –Ω–∞ –Ω–æ–≤—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ
        this.checkCell(player);
    }
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è —Ç–µ–ª–µ–ø–æ—Ä—Ç—É
    async showTeleportAnimation(player, epoch) {
        const pawn = document.getElementById(`pawn-${player.id}`);
        if (!pawn) return;
        
        // –î–æ–¥–∞—î–º–æ –µ—Ñ–µ–∫—Ç —Ç–µ–ª–µ–ø–æ—Ä—Ç—É
        pawn.style.transition = 'all 0.5s ease-in-out';
        pawn.style.transform = 'scale(0) rotate(360deg)';
        pawn.style.opacity = '0';
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –µ—Ñ–µ–∫—Ç —Å–≤—ñ—Ç–ª–∞
        const lightEffect = document.createElement('div');
        lightEffect.style.position = 'absolute';
        lightEffect.style.top = pawn.style.top;
        lightEffect.style.left = pawn.style.left;
        lightEffect.style.width = '50px';
        lightEffect.style.height = '50px';
        lightEffect.style.background = 'radial-gradient(circle, rgba(255,255,255,0.8) 0%, transparent 70%)';
        lightEffect.style.borderRadius = '50%';
        lightEffect.style.transform = 'translate(-50%, -50%)';
        lightEffect.style.animation = 'teleportFlash 0.5s ease-out';
        lightEffect.style.pointerEvents = 'none';
        
        this.gameBoard.appendChild(lightEffect);
        
        // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
        await this.sleep(500);
        
        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ—à–∫—É
        pawn.style.transform = 'scale(1) rotate(0deg)';
        pawn.style.opacity = '1';
        
        // –í–∏–¥–∞–ª—è—î–º–æ –µ—Ñ–µ–∫—Ç —Å–≤—ñ—Ç–ª–∞
        lightEffect.remove();
    }
    
    // –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏ –Ω–∞ –µ–ø–æ—Å—ñ
    centerViewOnEpoch(epochId) {
        const epoch = this.epochs.find(e => e.id === epochId);
        if (!epoch) return;
        
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à—É –∫–ª—ñ—Ç–∏–Ω–∫—É –µ–ø–æ—Ö–∏
        const firstCell = document.getElementById(`cell-${epoch.startCell}`);
        if (firstCell) {
            this.centerViewOn(firstCell);
        }
    }
    
    logMessage(message, type) {
        const logEntry = document.createElement('div');
        let typeClass = '';
        if (type === 'roll') typeClass = 'text-yellow-300';
        else if (type === 'event') typeClass = 'text-purple-300';
        else if (type === 'turn') typeClass = 'text-green-300 font-semibold';
        else if (type === 'system') typeClass = 'text-gray-400 italic';
        
        logEntry.className = `p-1 border-b border-gray-700 ${typeClass}`;
        logEntry.innerHTML = `> ${message}`;
        this.gameLog.insertBefore(logEntry, this.gameLog.firstChild);
        
        // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –¥–æ 20
        while (this.gameLog.children.length > 20) {
            this.gameLog.removeChild(this.gameLog.lastChild);
        }
    }
    
    endGame(winner, customMessage = "") {
        if (!this.gameActive) return;
        this.gameActive = false;
        this.rollDiceBtn.disabled = true;
        
        let message;
        if (customMessage) {
            message = customMessage;
        } else if(winner) {
            message = `–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: ${winner.name}, —è–∫–∏–π –Ω–∞–±—Ä–∞–≤ ${winner.points} –û–û!`;
        } else {
            const sortedPlayers = this.players.filter(p => !p.hasLost).sort((a,b) => b.points - a.points);
            if (sortedPlayers.length > 0) {
                message = `–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ–º—ñ–≥ ${sortedPlayers[0].name} –∑ ${sortedPlayers[0].points} –û–û!`;
            } else {
                message = `–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ú–∞—à–∏–Ω–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏.`;
            }
        }
        
        this.logMessage(message, 'system');
        const contentHTML = `
            <h2 class="text-4xl font-bold text-yellow-400 mb-4">–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</h2>
            <p class="text-2xl mb-6">${message}</p>
            <button id="restart-game-btn" class="w-full mt-6 bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded-lg transition duration-300 text-xl">–ì—Ä–∞—Ç–∏ –∑–Ω–æ–≤—É</button>
        `;
        
        this.showQuestModalWithContent(contentHTML, () => {
            document.getElementById('restart-game-btn').addEventListener('click', () => location.reload());
        });
    }
    
    showQuestModal(title, text, buttons) {
        let buttonsHTML = buttons.map((btn, index) => 
            `<button id="modal-btn-${index}" class="px-4 py-2 rounded-lg text-white font-semibold transition ${index === 0 ? 'bg-green-500 hover:bg-green-600' : 'bg-red-500 hover:bg-red-600'}">${btn.text}</button>`
        ).join(' ');
        
        const contentHTML = `
            <h3 class="text-2xl font-bold mb-2">${title}</h3>
            <div class="text-lg mb-6">${text}</div>
            <div class="flex justify-center gap-4">${buttonsHTML}</div>
        `;
        
        this.showQuestModalWithContent(contentHTML, () => {
            buttons.forEach((btn, index) => {
                document.getElementById(`modal-btn-${index}`).onclick = () => {
                    if (btn.callback) btn.callback();
                };
            });
        });
    }
    
    showQuestModalWithContent(html, setupCallback) {
        this.questModalContent.innerHTML = html;
        this.questModalContent.classList.remove('modal-shake', 'modal-pulse-green');
        this.questModal.classList.remove('hidden');
        if(setupCallback) setupCallback(this.questModalContent);
    }
    
    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è PvP —Ç–∞ Creative –∫–≤–µ—Å—Ç—ñ–≤ (–±—É–¥—É—Ç—å —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—ñ–∑–Ω—ñ—à–µ)
    triggerPvpQuest(player) {
        this.logMessage("PvP –∫–≤–µ—Å—Ç –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –≤ –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä—ñ", 'system');
        this.nextTurn();
    }
    
    triggerCreativeQuest(player) {
        this.logMessage("–¢–≤–æ—Ä—á–∏–π –∫–≤–µ—Å—Ç –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –≤ –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä—ñ", 'system');
        this.nextTurn();
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.EducationalPathGame = EducationalPathGame;
