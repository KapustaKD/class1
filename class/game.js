// –û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å –≥—Ä–∏

class EducationalPathGame {

    constructor() {

            this.BOARD_SIZE = 101;
            
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–≤—É–∫–∏
            this.diceSound = new Audio('sound/dice/normal_dice.mp3');
            this.diceSound.preload = 'auto';
            this.diceMetalSound = new Audio('sound/dice/dice_metal.mp3');
            this.diceMetalSound.preload = 'auto';
            this.clickSound = new Audio('sound/button_click/click.mp3');
            this.clickSound.preload = 'auto';
            this.chipMoveSound = new Audio('sound/chips/chip_move.mp3');
            this.chipMoveSound.preload = 'auto';
            this.notificationSound = new Audio('sound/notification/notification.mp3');
            this.notificationSound.preload = 'auto';
            this.timerSound = new Audio('sound/quests/clock_timer.mp3');
            this.timerSound.preload = 'auto';
            this.correctAnswerSound = new Audio('sound/quests/correct_answer.mp3');
            this.correctAnswerSound.preload = 'auto';
            this.pvpSound = new Audio('sound/quests/during_the_quest.mp3');
            this.pvpSound.preload = 'auto';
            this.startGameSound = new Audio('sound/start/start_game.m4a');
            this.startGameSound.preload = 'auto';
            
            // –§–æ–Ω–æ–≤–∞ –º—É–∑–∏–∫–∞
            this.backgroundMusic1 = new Audio('sound/fon/main_fon.m4a');
            this.backgroundMusic1.preload = 'auto';
            this.backgroundMusic1.loop = true;
            this.backgroundMusic1.volume = 0.05; // 5% –≥—É—á–Ω–æ—Å—Ç—ñ
            this.backgroundMusic2 = new Audio('sound/fon/rumbling_fon_2.mp3');
            this.backgroundMusic2.preload = 'auto';
            this.backgroundMusic2.loop = true;
            this.backgroundMusic2.volume = 0.05; // 5% –≥—É—á–Ω–æ—Å—Ç—ñ
            this.currentBackgroundMusic = this.backgroundMusic1;
            
            // –°–∏—Å—Ç–µ–º–∞ –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–æ—ó –≤—ñ—Ä–æ–≥—ñ–¥–Ω–æ—Å—Ç—ñ –¥–ª—è –º–µ—Ç–∞–ª–µ–≤–æ–≥–æ –∑–≤—É–∫—É
            this.metalSoundChance = 1; // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —à–∞–Ω—Å 1%
            this.metalSoundTriggered = false; // –ß–∏ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ –º–µ—Ç–∞–ª–µ–≤–∏–π –∑–≤—É–∫
            
            // –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ–æ–Ω–∏ –¥–ª—è –≥—Ä–∞–≤—Ü—ñ–≤
            this.availableBackgrounds = [
                'image/fon/fon1.png',
                'image/fon/fon2.png',
                'image/fon/fon3.png'
            ];
            
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–æ–Ω –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
            this.setRandomBackground();
    
        this.WIN_CONDITION_POINTS = 300;
    
    ¬† ¬† ¬† ¬† this.playerColors = ['#e53e3e', '#38b2ac', '#ed8936'];
    
    ¬† ¬† ¬† ¬† this.playerClasses = [
    
    ¬† ¬† ¬† ¬† ¬† ¬† { id: 'aristocrat', name: '‚öúÔ∏è –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç', startPoints: 50, moveModifier: 1 },
    
    ¬† ¬† ¬† ¬† ¬† ¬† { id: 'burgher', name: '‚öñÔ∏è –ú—ñ—â–∞–Ω–∏–Ω', startPoints: 20, moveModifier: 0 },
    
    ¬† ¬† ¬† ¬† ¬† ¬† { id: 'peasant', name: 'üå± –°–µ–ª—è–Ω–∏–Ω', startPoints: 0, moveModifier: -1 },
    
    ¬† ¬† ¬† ¬† ];
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† this.players = [];
    
    ¬† ¬† ¬† ¬† this.currentPlayerIndex = 0;
    
    ¬† ¬† ¬† ¬† this.gameActive = false;
    
    ¬† ¬† ¬† ¬† this.BOARD_SIZE = 101; // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—Ç–∏–Ω–æ–∫ (–≤–∫–ª—é—á–∞—é—á–∏ —Ñ—ñ–Ω—ñ—à)
    
            this.scale = 1.0; // –ë—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ setupEventListeners
    
    ¬† ¬† ¬† ¬† this.translateX = 0;
    
    ¬† ¬† ¬† ¬† this.translateY = 0;
    
    ¬† ¬† ¬† ¬† this.isPanning = false;
    
    ¬† ¬† ¬† ¬† this.panStartX = 0;
    
    ¬† ¬† ¬† ¬† this.panStartY = 0;
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –ù–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ä—Ç–∏ –∑ –æ—Å—Ç—Ä–æ–≤–∞–º–∏ –µ–ø–æ—Ö
    
    ¬† ¬† ¬† ¬† this.mapData = null;
    
    ¬† ¬† ¬† ¬† this.loadMapData();
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∫–ª—ñ—Ç–∏–Ω–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ—ó –µ–ø–æ—Ö–∏
    
        this.epochCoordinates = this.generateEpochCoordinates();

        // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫ –∑ –ø–æ–¥—ñ—è–º–∏
        this.usedEventCells = new Set();
        
        // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ
        this.usedEventTypes = new Set();

        // –î–∞–Ω—ñ –ø—Ä–æ –ø–æ–¥—ñ—ó –Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞—Ö (–ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º)
        // –í –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è server.js –∑ specialCells.js
        this.specialCells = {
            // –ì—Ä–∞ "–•—Ç–æ, –¥–µ, –∫–æ–ª–∏?"
            3: { type: 'mad-libs-quest', questName: '–•—Ç–æ? –î–µ? –ö–æ–ª–∏?' },

            // –í–µ–±–Ω–æ–≤–µ–ª–∏
            10: { type: 'webnovella-quest', questName: '–•–∞–ª–µ–ø–∞!', eventNumber: 2 },
            90: { type: 'webnovella-quest', questName: '–•–∞–ª–µ–ø–∞!', eventNumber: 3 },

            // PvP –ö–≤–µ—Å—Ç–∏
            21: { type: 'pvp-quest', gameType: 'megabrain', questName: '–ú–µ–≥–∞–º–æ–∑–æ–∫' },
            55: { type: 'pvp-quest', gameType: 'tic_tac_toe', questName: '–•—Ä–µ—Å—Ç–∏—Ç–∏—Å—è —Ä–∞–Ω–æ!' },
            61: { type: 'pvp-quest', gameType: 'genius', questName: '–Ø —É –º–∞–º–∏ –≥–µ–Ω—ñ–π' },
            81: { type: 'pvp-quest', gameType: 'pedagogobot', questName: '–ü–µ–¥–∞–≥–æ–±–æ—Ç' },
            99: { type: 'pvp-quest', gameType: 'rock_paper_scissors', questName: '–õ—è–ø—ñ—Å-—Ñ–æ—Ä—Ñ—ñ—Ü–µ—Å-–ø–∞–ø—ñ—Ä—É—Å' },

            // –¢–≤–æ—Ä—á—ñ –∫–≤–µ—Å—Ç–∏
            40: { type: 'creative-quest', gameType: 'great_pedagogical', questName: '–í–µ–ª–∏–∫–∏–π –ü–µ–¥–∞–≥–æ–≥—ñ—á–Ω–∏–π‚Ä¶' },
            69: { type: 'creative-quest', gameType: 'chronicles', questName: '–•—Ä–æ–Ω—ñ–∫–∏ –ù–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –í–æ—è–∂—É' },
            96: { type: 'creative-quest', gameType: 'pedagog_mom', questName: '–Ø —É –º–∞–º–∏ –ø–µ–¥–∞–≥–æ–≥' },

            // –ù–æ–≤—ñ —Ä–æ–∑–≤–∞–∂–∞–ª—å–Ω—ñ/–Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ –∑–æ–Ω–∏
            7: { type: 'amphitheater', name: '–ê–º—Ñ—ñ—Ç–µ–∞—Ç—Ä' },
            15: { type: 'tavern', name: '–®–∏–Ω–æ–∫' },
            34: { type: 'tavern', name: '–®–∏–Ω–æ–∫' },
            67: { type: 'casino', name: '–ö–∞–∑–∏–Ω–æ' },
            93: { type: 'casino', name: '–ö–∞–∑–∏–Ω–æ' },

            // –†–µ—ñ–Ω–∫–∞—Ä–Ω–∞—Ü—ñ—è (—Ä–∞–Ω–Ω—è —Å–º–µ—Ä—Ç—å —ñ –º–∏—Ç—Ç—î–≤–µ –ø–µ—Ä–µ—Ä–æ–¥–∂–µ–Ω–Ω—è)
            6: { type: 'early-reincarnation', targetEpoch: 2, points: 50 },
            18: { type: 'early-reincarnation', targetEpoch: 3, points: 60 },
            30: { type: 'early-reincarnation', targetEpoch: 4, points: 70 },
            63: { type: 'early-reincarnation', targetEpoch: 5, points: 80 },
            85: { type: 'early-reincarnation', targetEpoch: 6, points: 90 },

            // –û–±—Ö—ñ–¥–Ω—ñ —à–ª—è—Ö–∏
            5: { type: 'alternative-path', target: 11, cost: 10, description: '–û–±—Ö—ñ–¥–Ω–∏–π —à–ª—è—Ö –¥–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ 11 –∑–∞ 10 –û–û' },
            46: { type: 'alternative-path', target: 57, cost: 25, description: '–û–±—Ö—ñ–¥–Ω–∏–π —à–ª—è—Ö –¥–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ 57 –∑–∞ 25 –û–û' },

            // –¢–µ—Å—Ç–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
            2: { type: 'test-question' },
            8: { type: 'test-question' },
            11: { type: 'test-question' },
            17: { type: 'test-question' },
            20: { type: 'test-question' },
            23: { type: 'test-question' },
            26: { type: 'test-question' },
            29: { type: 'test-question' },
            35: { type: 'test-question' },
            38: { type: 'test-question' },
            41: { type: 'test-question' },
            44: { type: 'test-question' },
            47: { type: 'test-question' },
            50: { type: 'test-question' },
            53: { type: 'test-question' },
            56: { type: 'test-question' },
            59: { type: 'test-question' },
            62: { type: 'test-question' },
            65: { type: 'test-question' },
            68: { type: 'test-question' },
            71: { type: 'test-question' },
            74: { type: 'test-question' },
            77: { type: 'test-question' },
            80: { type: 'test-question' },
            83: { type: 'test-question' },
            86: { type: 'test-question' },
            89: { type: 'test-question' },
            92: { type: 'test-question' },
            95: { type: 'test-question' },
            98: { type: 'test-question' },

            // –†–µ—ñ–Ω–∫–∞—Ä–Ω–∞—Ü—ñ—è
            12: { type: 'reincarnation', nextEpoch: 2, points: 30 },
            22: { type: 'reincarnation', nextEpoch: 3, points: 40 },
            43: { type: 'reincarnation', nextEpoch: 4, points: 50 },
            75: { type: 'reincarnation', nextEpoch: 5, points: 60 },
            97: { type: 'reincarnation', nextEpoch: 6, points: 70 },

            // –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–æ–¥—ñ—è
            100: { type: 'machine-uprising' }
        };
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† this.initializeElements();
    
    ¬† ¬† ¬† ¬† this.setupEventListeners();
    
    ¬† ¬† }
    
    ¬† ¬†
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–∞—Ä—Ç–∏ –∑ mapData.js
    
    loadMapData() {
    
        // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ –∑ mapData.js
    
        import('./mapData.js').then(module => {
    
            this.mapData = module.mapData;
    
            console.log('Map data loaded:', this.mapData);
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç—É –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            // this.createBoard(); // –í–∏–¥–∞–ª–µ–Ω–æ - –∫–∞—Ä—Ç–∞ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –≤ loadMapData()
    
        }).catch(error => {
    
            console.error('Error loading map data:', error);
    
    ¬† ¬† ¬† ¬† ¬† ¬† // Fallback –¥–∞–Ω—ñ —è–∫—â–æ —ñ–º–ø–æ—Ä—Ç –Ω–µ –≤–¥–∞–≤—Å—è
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.mapData = {
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† canvasSize: { width: 1920, height: 1080 },
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† zones: [],
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† cells: []
    
    ¬† ¬† ¬† ¬† ¬† ¬† };
    
    ¬† ¬† ¬† ¬† });
    
    ¬† ¬† }
    
    ¬† ¬†
    
    ¬† ¬† // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∫–ª—ñ—Ç–∏–Ω–æ–∫ –∑ mapData.js
    
    ¬† ¬† generateEpochCoordinates() {
    
    ¬† ¬† ¬† ¬† const coordinates = [];
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† if (!this.mapData || !this.mapData.cells) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† console.error('Map data not loaded!');
    
    ¬† ¬† ¬† ¬† ¬† ¬† return coordinates;
    
    ¬† ¬† ¬† ¬† }
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† this.mapData.cells.forEach(cell => {
    
    ¬† ¬† ¬† ¬† ¬† ¬† // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–æ–Ω—É –¥–ª—è –∫–ª—ñ—Ç–∏–Ω–∫–∏
    
    ¬† ¬† ¬† ¬† ¬† ¬† const zone = this.getZoneForCell(cell);
    
    ¬† ¬† ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† ¬† ¬† coordinates.push({
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† top: cell.y,
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† left: cell.x,
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† zone: zone,
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† cellId: cell.id,
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† isFinish: cell.id === 101
    
    ¬† ¬† ¬† ¬† ¬† ¬† });
    
    ¬† ¬† ¬† ¬† });
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† return coordinates;
    
    ¬† ¬† }
    
    ¬† ¬†
    
    // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–æ–Ω–∏ –¥–ª—è –∫–ª—ñ—Ç–∏–Ω–∫–∏
    getZoneForCell(cell) {
        if (!this.mapData || !this.mapData.zones) {
            console.warn('mapData.zones –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ');
            return 0;
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, –≤ —è–∫—ñ–π –∑–æ–Ω—ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∫–ª—ñ—Ç–∏–Ω–∫–∞
        for (let i = 0; i < this.mapData.zones.length; i++) {
            const zone = this.mapData.zones[i];
            if (zone && zone.svgPath) {
                if (this.isPointInZone(cell.x, cell.y, zone.svgPath)) {
                    return i;
                }
            } else {
                console.warn(`–ó–æ–Ω–∞ ${i} –Ω–µ –º–∞—î svgPath:`, zone);
            }
        }
        
        return 0; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–µ—Ä—à–∞ –∑–æ–Ω–∞
    }
    
    ¬† ¬†
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ç–æ—á–∫–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∑–æ–Ω—ñ (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
    isPointInZone(x, y, svgPath) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ svgPath —ñ—Å–Ω—É—î
        if (!svgPath || typeof svgPath !== 'string') {
            console.warn('svgPath –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –∞–±–æ –Ω–µ —î —Ä—è–¥–∫–æ–º:', svgPath);
            return false;
        }
        
        // –°–ø—Ä–æ—â–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑ mapData.js
        if (svgPath.includes('0 1080')) return x >= 0 && x <= 700 && y >= 500; // –°—ñ—Ä—ñ –ó–µ–º–ª—ñ
        if (svgPath.includes('700 1080')) return x >= 700 && x <= 1200 && y >= 650; // –†–æ–∂–µ–≤–∞ –î–æ–ª–∏–Ω–∞
        if (svgPath.includes('1200 1080')) return x >= 1200 && y >= 600; // –ó–µ–ª–µ–Ω–∏–π –õ—ñ—Å
        if (svgPath.includes('1920 800')) return x >= 800 && y >= 0 && y <= 600; // –°–∏–Ω—è –†—ñ–∫–∞
        if (svgPath.includes('900 0')) return x >= 0 && x <= 900 && y >= 0 && y <= 500; // –ñ–æ–≤—Ç—ñ –ü—É—Å—Ç–µ–ª—ñ
        
        return false;
    }
    
    ¬† ¬†
    
    ¬† ¬† initializeElements() {
    
    ¬† ¬† ¬† ¬† this.gameViewport = document.getElementById('game-viewport');
    
    ¬† ¬† ¬† ¬† this.gameBoardContainer = document.getElementById('game-board-container');
    
    ¬† ¬† ¬† ¬† this.gameBoard = document.getElementById('game-board');
    
    ¬† ¬† ¬† ¬† this.rollDiceBtn = document.getElementById('roll-dice-btn');
    
    ¬† ¬† ¬† ¬† this.gameLog = document.getElementById('game-log');
    
    ¬† ¬† ¬† ¬† this.currentPlayerNameEl = document.getElementById('current-player-name');
    
    ¬† ¬† ¬† ¬† this.currentPlayerClassEl = document.getElementById('current-player-class');
    
    ¬† ¬† ¬† ¬† this.currentPlayerPointsEl = document.getElementById('current-player-points');
    
    ¬† ¬† ¬† ¬† this.leaderboardEl = document.getElementById('leaderboard');
    
    ¬† ¬† ¬† ¬† this.diceInner = document.getElementById('dice-inner');
    
    ¬† ¬† ¬† ¬† this.pathSvg = document.getElementById('path-svg');
    
    ¬† ¬† ¬† ¬† this.rulesModal = document.getElementById('rules-modal');
    
    ¬† ¬† ¬† ¬† this.showSetupBtn = document.getElementById('show-setup-btn');
    
    ¬† ¬† ¬† ¬† this.startModal = document.getElementById('start-modal');
    
    ¬† ¬† ¬† ¬† this.playerCountSelect = document.getElementById('player-count');
    
    ¬† ¬† ¬† ¬† this.playerSetupContainer = document.getElementById('player-setup-container');
    
    ¬† ¬† ¬† ¬† this.startGameBtn = document.getElementById('start-game-btn');
    
    ¬† ¬† ¬† ¬† this.questModal = document.getElementById('quest-modal');
    
    ¬† ¬† ¬† ¬† this.questModalContent = document.getElementById('quest-modal-content');
    
    ¬† ¬† }
    
    ¬† ¬†
    
    ¬† ¬† setupEventListeners() {
    
    ¬† ¬† ¬† ¬† // –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–¥—ñ—ó –≥—Ä–∏
    
    ¬† ¬† ¬† ¬† this.showSetupBtn.addEventListener('click', () => {
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.rulesModal.classList.add('hidden');
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.startModal.classList.remove('hidden');
    
    ¬† ¬† ¬† ¬† });
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† this.playerCountSelect.addEventListener('change', () => this.setupPlayerInputs());
    
    ¬† ¬† ¬† ¬† this.startGameBtn.addEventListener('click', () => this.initializeGame());
    
    ¬† ¬† ¬† ¬† this.rollDiceBtn.addEventListener('click', () => {
    
    ¬† ¬† ¬† ¬† ¬† ¬† if (this.gameActive) this.rollTheDice();
    
    ¬† ¬† ¬† ¬† });
    
    ¬† ¬† ¬† ¬†
    
        // –ó—É–º —ñ –ø–∞–Ω–æ—Ä–∞–º–∞
        
        // –í–ò–ú–ö–ù–ï–ù–û: –ó—É–º —ñ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ - –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—á–Ω–∞
        // this.gameViewport.addEventListener('wheel', (e) => this.handleZoom(e));
        // this.gameViewport.addEventListener('mousedown', (e) => this.startPanning(e));
        // window.addEventListener('mousemove', (e) => this.handlePanning(e));
        // window.addEventListener('mouseup', () => this.stopPanning());
    
    ¬† ¬† ¬† ¬†
    
        this.setupPlayerInputs();
        
        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª–∞–≤—ñ—à –¥–ª—è –∑–∞–±–æ—Ä–æ–Ω–∏ Enter –Ω–∞ –∫–∏–¥–æ–∫ –∫—É–±–∏–∫–∞
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && this.rollDiceBtn && !this.rollDiceBtn.disabled) {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏–º–æ—Å—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ –∑ —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø–æ–ª–µ–º
                const activeElement = document.activeElement;
                if (activeElement && (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA')) {
                    // –î–æ–∑–≤–æ–ª—è—î–º–æ Enter –≤ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–ª—è—Ö
                    return;
                }
                
                // –ë–ª–æ–∫—É—î–º–æ Enter –¥–ª—è –∫–∏–¥–∫–∞ –∫—É–±–∏–∫–∞
                e.preventDefault();
                console.log('üö´ Enter –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –¥–ª—è –∫–∏–¥–∫–∞ –∫—É–±–∏–∫–∞');
            }
        });
        
        // –í–ò–î–ê–õ–ï–ù–û: –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Ç–µ–ø–µ—Ä –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –≤ createBoard()
        // this.setInitialScale();
        // this.applyTransform();
    
    }
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É
    setInitialScale() {
        console.log('üîß setInitialScale() –≤–∏–∫–ª–∏–∫–∞–Ω–æ (–ø–µ—Ä—à–∞ —Ñ—É–Ω–∫—Ü—ñ—è)');
        console.log('üîç –ü–ï–†–ï–î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è–º translateY:', this.translateY);
        
        // –í–ò–ú–ö–ù–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
        this.scale = 1; // –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π –º–∞—Å—à—Ç–∞–± 1:1
        this.translateX = 0; // –ë–µ–∑ –∑–º—ñ—â–µ–Ω–Ω—è
        this.translateY = 0; // –ë–µ–∑ –∑–º—ñ—â–µ–Ω–Ω—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—ñ
        
        console.log('üîç –ü–Ü–°–õ–Ø –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è translateY:', this.translateY);
        
        console.log('üìä –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π –º–∞—Å—à—Ç–∞–± –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', {
            scale: this.scale,
            translateX: this.translateX,
            translateY: this.translateY
        });
    }
    
    
    
    setupPlayerInputs() {
    
    ¬† ¬† ¬† ¬† const count = this.playerCountSelect.value;
    
    ¬† ¬† ¬† ¬† this.playerSetupContainer.innerHTML = '';
    
    ¬† ¬† ¬† ¬† for (let i = 0; i < count; i++) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.playerSetupContainer.innerHTML += `
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† <div class="mt-4 p-3 border rounded-lg" style="border-color: ${this.playerColors[i]};">
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† <h3 class="text-xl font-semibold mb-2" style="color: ${this.playerColors[i]};">–ì—Ä–∞–≤–µ—Ü—å ${i + 1}</h3>
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† <div class="mb-2">
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† <label for="player-name-${i}" class="block font-medium">–Ü–º'—è:</label>
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† <input type="text" id="player-name-${i}" value="–ì—Ä–∞–≤–µ—Ü—å ${i + 1}" class="w-full p-2 border border-gray-300 rounded text-black">
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† </div>
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† <div>
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† <label for="player-class-${i}" class="block font-medium">–ö–ª–∞—Å:</label>
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† <select id="player-class-${i}" class="w-full p-2 border border-gray-300 rounded text-black">
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ${this.playerClasses.map(c => `<option value="${c.id}">${c.name}</option>`).join('')}
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† </select>
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† </div>
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† </div>
    
    ¬† ¬† ¬† ¬† ¬† ¬† `;
    
    ¬† ¬† ¬† ¬† }
    
    ¬† ¬† }
    
    ¬† ¬†
    
    ¬† ¬† initializeGame() {
    
    ¬† ¬† ¬† ¬† const count = this.playerCountSelect.value;
    
    ¬† ¬† ¬† ¬† this.players = [];
    
    ¬† ¬† ¬† ¬† for (let i = 0; i < count; i++) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† const name = document.getElementById(`player-name-${i}`).value;
    
    ¬† ¬† ¬† ¬† ¬† ¬† const classId = document.getElementById(`player-class-${i}`).value;
    
    ¬† ¬† ¬† ¬† ¬† ¬† const playerClass = this.playerClasses.find(c => c.id === classId);
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.players.push({
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† id: i + 1,
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† name,
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† color: this.playerColors[i],
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† position: 0,
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† class: playerClass,
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† points: playerClass.startPoints,
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† skipTurn: false,
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† extraTurn: false,
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† hasLost: false,
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† moveModifier: 0
    
    ¬† ¬† ¬† ¬† ¬† ¬† });
    
    ¬† ¬† ¬† ¬† }
    
    ¬† ¬† ¬† ¬†
    
            // this.createBoard(); // –í–∏–¥–∞–ª–µ–Ω–æ - –∫–∞—Ä—Ç–∞ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –≤ loadMapData()
    
    ¬† ¬† ¬† ¬† this.gameActive = true;
    
    ¬† ¬† ¬† ¬† this.currentPlayerIndex = 0;
    
    ¬† ¬† ¬† ¬† this.updateUI();
    
        this.startModal.classList.add('hidden');
        
       
        
        const startCell = document.getElementById('cell-0');
    
        this.centerViewOn(startCell);
    
    ¬† ¬† }
    
    ¬† ¬†
    
    ¬† ¬† createBoard() {
    
            this.gameBoard.innerHTML = '';
        
        // –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–∞–Ω—ñ –∫–∞—Ä—Ç–∏
        if (!this.mapData || !this.mapData.cells || this.mapData.cells.length === 0) {
            console.error('Map data not loaded yet! Waiting...');
            // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–∞—Ä—Ç–∏
            setTimeout(() => this.createBoard(), 100);
            return;
        }
        
        console.log('Creating board with map data:', this.mapData);
    
    ¬† ¬† ¬† ¬†
    
        // –°—Ç–≤–æ—Ä—é—î–º–æ –û–î–ò–ù –≤–µ–ª–∏–∫–∏–π –±—ñ–ª–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–∏
        // this.createGameMap(); // –í–ò–î–ê–õ–ï–ù–û - —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω—ñ SVG-–∑–æ–Ω–∏ –∑ mapData.js
        // this.createStaticZones(); // –í–ò–î–ê–õ–ï–ù–û - —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    
    ¬† ¬† ¬† ¬†
    
        // –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞
    
        const startCell = document.createElement('div');
    
        startCell.id = 'cell-0';
    
        startCell.className = 'board-cell start';
    
        startCell.style.top = '700px';
    
        startCell.style.left = '25px';
    
        startCell.innerHTML = '<span>–°–¢–ê–†–¢</span>';
    
        this.gameBoard.appendChild(startCell);
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑ mapData.js
    
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑ mapData.js
        console.log('–°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏, –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å:', this.mapData.cells.length);
        this.mapData.cells.forEach((cell, index) => {
            if (index < 5) { // –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 5 –∫–ª—ñ—Ç–∏–Ω–æ–∫
                console.log(`–ö–ª—ñ—Ç–∏–Ω–∫–∞ ${cell.id}: x=${cell.x}, y=${cell.y}`);
            }
            
            const cellElement = document.createElement('div');
            cellElement.id = `cell-${cell.id}`;
            
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–æ–Ω—É –¥–ª—è –∫–ª—ñ—Ç–∏–Ω–∫–∏
            const zone = this.getZoneForCell(cell);
            const zoneData = this.mapData.zones[zone];
            const special = this.specialCells[cell.id];
    
             
    
             let cellClass = special ? special.type : 'empty';
    
             if (cell.id === 101) cellClass = 'finish';
    
             
    
             cellElement.className = `board-cell ${cellClass} zone-${zone}`;
    
             cellElement.style.top = `${cell.y}px`;
    
             cellElement.style.left = `${cell.x}px`;
    
             
    
             if (cell.id === 101) {
    
                 cellElement.innerHTML = '<span>üëë</span>'; // –ö–æ—Ä–æ–Ω–∞ –¥–ª—è —Ñ—ñ–Ω—ñ—à—É
    
             } else {
    
                 cellElement.innerHTML = `<span>${cell.id}</span>`;
    
             }
    
             
    
             // –î–æ–¥–∞—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É –∑ –∑–æ–Ω–æ—é
    
             if (zoneData) {
    
                 cellElement.title = `${zoneData.name}`;
    
             }
    
             
    
             this.gameBoard.appendChild(cellElement);
    
         });
    
    ¬† ¬† ¬† ¬†
    
            // –í–ò–î–ê–õ–ï–ù–û: this.drawSequentialPath(); - —Ç–µ–ø–µ—Ä —à–ª—è—Ö –Ω–∞–º–∞–ª—å–æ–≤–∞–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç–∏–Ω—Ü—ñ
    
    ¬† ¬† ¬† ¬†
    
        // –§—ñ—à–∫–∏ –≥—Ä–∞–≤—Ü—ñ–≤ (–∞–≤–∞—Ç–∞—Ä–∏)
    
        this.players.forEach(p => {
    
            const pawn = document.createElement('img');
    
            pawn.id = `pawn-${p.id}`;
    
            pawn.className = 'player-pawn';
    
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–≤–∞—Ç–∞—Ä, —è–∫—â–æ –≤—ñ–Ω —î, —ñ–Ω–∞–∫—à–µ –∫–æ–ª—å–æ—Ä–æ–≤–∏–π –∫—Ä—É–∂–µ—á–æ–∫
            if (p.avatarUrl) {
                pawn.src = p.avatarUrl;
                pawn.alt = `${p.name} –∞–≤–∞—Ç–∞—Ä`;
            } else {
                // Fallback –Ω–∞ –∫–æ–ª—å–æ—Ä–æ–≤–∏–π –∫—Ä—É–∂–µ—á–æ–∫
                pawn.style.backgroundColor = p.color;
                pawn.style.borderRadius = '50%';
            }
    
            // –î–æ–¥–∞—î–º–æ —Ñ—ñ—à–∫—É –¥–æ –¥–æ—à–∫–∏ –∑–∞–º—ñ—Å—Ç—å –∫–ª—ñ—Ç–∏–Ω–∫–∏
            this.gameBoard.appendChild(pawn);
            
            // –ü–æ–∑–∏—Ü—ñ–æ–Ω—É—î–º–æ —Ñ—ñ—à–∫—É –∞–±—Å–æ–ª—é—Ç–Ω–æ
            const cellRect = startCell.getBoundingClientRect();
            const boardRect = this.gameBoard.getBoundingClientRect();
            
            pawn.style.position = 'absolute';
            pawn.style.left = `${cellRect.left - boardRect.left + cellRect.width / 2 - 37.5}px`;
            pawn.style.top = `${cellRect.top - boardRect.top + cellRect.height / 2 - 37.5}px`;
            pawn.style.zIndex = '10';
    
        });
        
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –º–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç–∏ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        setTimeout(() => {
            console.log('‚è∞ createBoard() - –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–∞—Å—à—Ç–∞–± —á–µ—Ä–µ–∑ setTimeout');
            this.setInitialScale();
            this.applyTransform();
            console.log('‚úÖ createBoard() - –º–∞—Å—à—Ç–∞–± –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ—à–∫–∏');
        }, 100);
    
    }
    
    ¬† ¬†
    
    // –í–ò–î–ê–õ–ï–ù–û: createGameMap() —Ç–∞ createStaticZones() - —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è map_background.png
    
    ¬† ¬†
    
    // –í–ò–î–ê–õ–ï–ù–û: drawSequentialPath() - —Ç–µ–ø–µ—Ä —à–ª—è—Ö –Ω–∞–º–∞–ª—å–æ–≤–∞–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç–∏–Ω—Ü—ñ
    
    ¬† ¬†
    
    ¬† ¬† drawPath() {
    
    ¬† ¬† ¬† ¬† this.pathSvg.innerHTML = '';
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –ú–∞–ª—é—î–º–æ –ª—ñ–Ω—ñ—ó —Ç—ñ–ª—å–∫–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–æ–∂–Ω–æ—ó —Å–µ–∫—Ü—ñ—ó
    
    ¬† ¬† ¬† ¬† const sectionBoundaries = [0, 25, 50, 75, 100, 124]; // –ú–µ–∂—ñ —Å–µ–∫—Ü—ñ–π
    
    ¬† ¬† ¬† ¬† const allCoords = [{top: 700, left: 25}, ...this.cellCoordinates];
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† for (let section = 0; section < sectionBoundaries.length - 1; section++) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† const startIdx = sectionBoundaries[section];
    
    ¬† ¬† ¬† ¬† ¬† ¬† const endIdx = sectionBoundaries[section + 1];
    
    ¬† ¬† ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† ¬† ¬† if (startIdx >= allCoords.length) break;
    
    ¬† ¬† ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† ¬† ¬† let pathData = '';
    
    ¬† ¬† ¬† ¬† ¬† ¬† for (let i = startIdx; i < endIdx && i < allCoords.length - 1; i++) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† const p1 = { x: allCoords[i].left, y: allCoords[i].top };
    
    ¬† ¬† ¬† ¬† ¬† ¬† const p2 = { x: allCoords[i+1].left, y: allCoords[i+1].top };
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† if (i === startIdx) pathData += `M ${p1.x} ${p1.y} `;
    
    ¬† ¬† ¬† ¬† ¬† ¬† pathData += `L ${p2.x} ${p2.y} `;
    
    ¬† ¬† ¬† ¬† }
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† ¬† ¬† if (pathData) {
    
    ¬† ¬† ¬† ¬† let path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    
    ¬† ¬† ¬† ¬† path.setAttribute('d', pathData);
    
    ¬† ¬† ¬† ¬† path.setAttribute('fill', 'none');
    
    ¬† ¬† ¬† ¬† path.setAttribute('stroke', 'rgba(255, 255, 255, 0.4)');
    
    ¬† ¬† ¬† ¬† path.setAttribute('stroke-width', '10');
    
    ¬† ¬† ¬† ¬† path.setAttribute('stroke-dasharray', '20 10');
    
    ¬† ¬† ¬† ¬† path.setAttribute('stroke-linecap', 'round');
    
    ¬† ¬† ¬† ¬† this.pathSvg.appendChild(path);
    
    ¬† ¬† ¬† ¬† ¬† ¬† }
    
    ¬† ¬† ¬† ¬† }
    
    ¬† ¬† }
    
    ¬† ¬†
    
        // –ó—É–º —ñ –ø–∞–Ω–æ—Ä–∞–º–∞
    
    // –í–ò–î–ê–õ–ï–ù–û: –î—É–±–ª—é—é—á–∞ —Ñ—É–Ω–∫—Ü—ñ—è applyTransform() - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥—Ä—É–≥—É
    
    ¬† ¬†
    
    handleZoom(e) {
        // V–ò–ú–ö–ù–ï–ù–û: –ó—É–º –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π - –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—á–Ω–∞
        e.preventDefault();
        return; // –ù–µ —Ä–æ–±–∏–º–æ –Ω—ñ—á–æ–≥–æ
    }
    
       
    
        startPanning(e) {
            // –í–ò–ú–ö–ù–ï–ù–û: –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ - –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—á–Ω–∞
            e.preventDefault();
            return; // –ù–µ —Ä–æ–±–∏–º–æ –Ω—ñ—á–æ–≥–æ
        }
    
    ¬† ¬†
    
    handlePanning(e) {
        // –í–ò–ú–ö–ù–ï–ù–û: –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ - –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—á–Ω–∞
        console.log('üö´ handlePanning() –≤–∏–º–∫–Ω–µ–Ω–æ - –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—á–Ω–∞');
        e.preventDefault();
        return; // –ù–µ —Ä–æ–±–∏–º–æ –Ω—ñ—á–æ–≥–æ
    }
    
    ¬† ¬†
    
    ¬† ¬† stopPanning() {
    
    ¬† ¬† ¬† ¬† this.isPanning = false;
    
    ¬† ¬† ¬† ¬† this.gameViewport.style.cursor = 'grab';
    
    ¬† ¬† ¬† ¬† this.gameBoardContainer.style.transition = 'transform 0.5s ease';
    
    ¬† ¬† }
    
    ¬† ¬†
    
    ¬† ¬† centerViewOn(element) {
    
    ¬† ¬† ¬† ¬† const viewportRect = this.gameViewport.getBoundingClientRect();
    
    ¬† ¬† ¬† ¬† const targetX = viewportRect.width / 2;
    
    ¬† ¬† ¬† ¬† const targetY = viewportRect.height / 2;
    
    ¬† ¬† ¬† ¬† const elementX = element.offsetLeft + element.offsetWidth / 2;
    
    ¬† ¬† ¬† ¬† const elementY = element.offsetTop + element.offsetHeight / 2;
    
        this.translateX = targetX - (elementX * this.scale);

        this.translateY = targetY - (elementY * this.scale);

        // –í–ò–î–ê–õ–ï–ù–û: applyTransform() - —Ñ–æ–∫—É—Å—É–≤–∞–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ
    
    ¬† ¬† }
    
    ¬† ¬†
    
    // –Ü–≥—Ä–æ–≤–∞ –ª–æ–≥—ñ–∫–∞
    
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Ñ–æ–Ω—É
    setRandomBackground() {
        // –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–æ–Ω
        const randomIndex = Math.floor(Math.random() * this.availableBackgrounds.length);
        const selectedBackground = this.availableBackgrounds[randomIndex];
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π —Ñ–æ–Ω –≤ localStorage –¥–ª—è —Ü—ñ—î—ó —Å–µ—Å—ñ—ó
        localStorage.setItem('playerBackground', selectedBackground);
        
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–æ–Ω –Ω–∞ body
        document.body.style.backgroundImage = `url('${selectedBackground}')`;
        document.body.style.backgroundSize = 'cover';
        document.body.style.backgroundPosition = 'center';
        document.body.style.backgroundRepeat = 'no-repeat';
        document.body.style.backgroundAttachment = 'fixed';
        
        console.log('–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ñ–æ–Ω:', selectedBackground);
    }
    
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É –∫–∏–¥–∫–∞ –∫—É–±–∏–∫–∞
    playDiceSound() {
        try {
            // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π –∑–≤—É–∫ –∫—É–±–∏–∫–∞
            this.diceSound.currentTime = 0;
            this.diceSound.play().catch(e => {
                console.log('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—É–∫ –∫—É–±–∏–∫–∞:', e);
            });
        } catch (e) {
            console.log('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É –∫—É–±–∏–∫–∞:', e);
        }
    }
    
    playClickSound() {
        try {
            this.clickSound.currentTime = 0;
            this.clickSound.play().catch(e => {
                console.log('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—É–∫ –∫–ª—ñ–∫–∞–Ω–Ω—è:', e);
            });
        } catch (e) {
            console.log('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É –∫–ª—ñ–∫–∞–Ω–Ω—è:', e);
        }
    }
    
    playChipMoveSound() {
        try {
            this.chipMoveSound.currentTime = 0;
            this.chipMoveSound.play().catch(e => {
                console.log('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—É–∫ —Ä—É—Ö—É —Ñ—ñ—à–∫–∏:', e);
            });
        } catch (e) {
            console.log('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É —Ä—É—Ö—É —Ñ—ñ—à–∫–∏:', e);
        }
    }
    
    playNotificationSound() {
        try {
            this.notificationSound.currentTime = 0;
            this.notificationSound.play().catch(e => {
                console.log('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—É–∫ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', e);
            });
        } catch (e) {
            console.log('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', e);
        }
    }
    
    playTimerSound() {
        try {
            this.timerSound.currentTime = 0;
            this.timerSound.play().catch(e => {
                console.log('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—É–∫ —Ç–∞–π–º–µ—Ä–∞:', e);
            });
        } catch (e) {
            console.log('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É —Ç–∞–π–º–µ—Ä–∞:', e);
        }
    }
    
    playCorrectAnswerSound() {
        try {
            this.correctAnswerSound.currentTime = 0;
            this.correctAnswerSound.play().catch(e => {
                console.log('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—É–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', e);
            });
        } catch (e) {
            console.log('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', e);
        }
    }
    
    playPvpSound() {
        try {
            this.pvpSound.currentTime = 0;
            this.pvpSound.play().catch(e => {
                console.log('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—É–∫ PvP:', e);
            });
        } catch (e) {
            console.log('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É PvP:', e);
        }
    }
    
    playStartGameSound() {
        try {
            this.startGameSound.currentTime = 0;
            this.startGameSound.play().catch(e => {
                console.log('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—É–∫ –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏:', e);
            });
        } catch (e) {
            console.log('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏:', e);
        }
    }
    
    startBackgroundMusic() {
        try {
            this.currentBackgroundMusic.play().catch(e => {
                console.log('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–æ–Ω–æ–≤—É –º—É–∑–∏–∫—É:', e);
            });
        } catch (e) {
            console.log('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ–Ω–æ–≤–æ—ó –º—É–∑–∏–∫–∏:', e);
        }
    }
    
    stopBackgroundMusic() {
        try {
            this.currentBackgroundMusic.pause();
            this.currentBackgroundMusic.currentTime = 0;
        } catch (e) {
            console.log('–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ —Ñ–æ–Ω–æ–≤–æ—ó –º—É–∑–∏–∫–∏:', e);
        }
    }
    
    switchBackgroundMusic() {
        try {
            this.stopBackgroundMusic();
            this.currentBackgroundMusic = this.currentBackgroundMusic === this.backgroundMusic1 ? 
                this.backgroundMusic2 : this.backgroundMusic1;
            this.startBackgroundMusic();
        } catch (e) {
            console.log('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ñ–æ–Ω–æ–≤–æ—ó –º—É–∑–∏–∫–∏:', e);
        }
    }
    
    setBackgroundVolume(volume) {
        try {
            this.backgroundMusic1.volume = volume;
            this.backgroundMusic2.volume = volume;
        } catch (e) {
            console.log('–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ:', e);
        }
    }

    async rollTheDice() {

        this.rollDiceBtn.disabled = true;
        
        // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫–∏–¥–∫—ñ–≤
        this.diceRollCount++;
        
        // –í—ñ–¥—Å–æ—Ç–∫–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –º–µ—Ç–∞–ª–µ–≤–æ–≥–æ –∑–≤—É–∫—É
        const randomChance = Math.random() * 100;
        let playMetalSound = false;
        
        if (randomChance <= this.metalSoundChance) {
            playMetalSound = true;
            this.metalSoundTriggered = true;
            this.metalSoundChance = 1; // –°–∫–∏–¥–∞—î–º–æ —à–∞–Ω—Å –¥–æ 1%
            console.log('üé≤ –ú–µ—Ç–∞–ª–µ–≤–∏–π –∑–≤—É–∫ —Å–ø—Ä–∞—Ü—é–≤–∞–≤! –®–∞–Ω—Å –±—É–≤:', this.metalSoundChance + '%');
        } else {
            // –ó–±—ñ–ª—å—à—É—î–º–æ —à–∞–Ω—Å –Ω–∞ 5% –∑–∞ –∫–æ–∂–µ–Ω –∫–∏–¥–æ–∫
            this.metalSoundChance = Math.min(this.metalSoundChance + 5, 50); // –ú–∞–∫—Å–∏–º—É–º 50%
        }
        
        // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—É–∫ –∫–∏–¥–∫–∞ –∫—É–±–∏–∫–∞
        if (playMetalSound) {
            try {
                this.diceMetalSound.currentTime = 0;
                this.diceMetalSound.play().catch(e => {
                    console.log('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ—Ç–∞–ª–µ–≤–∏–π –∑–≤—É–∫ –∫—É–±–∏–∫–∞:', e);
                });
            } catch (e) {
                console.log('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ—Ç–∞–ª–µ–≤–æ–≥–æ –∑–≤—É–∫—É –∫—É–±–∏–∫–∞:', e);
            }
        } else {
            this.playDiceSound();
        }
    
        let roll = Math.floor(Math.random() * 6) + 1;
        
        // –õ–æ–≥—ñ–∫–∞ –ø—ñ–¥–ª–∞—à—Ç–æ–≤—É–≤–∞–Ω–Ω—è –∫—É–±–∏–∫–∞ –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–Ω—è –Ω–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏
        const player = this.players[this.currentPlayerIndex];
        const currentPosition = player.position;
        
        // –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫ –∑ –ø–æ–¥—ñ—è–º–∏
        const specialCells = [2, 3, 5, 8, 10, 11, 14, 15, 17, 20, 21, 23, 26, 29, 32, 35, 36, 38, 40, 41, 44, 46, 47, 50, 53, 55, 56, 59, 61, 62, 65, 68, 69, 71, 74, 76, 77, 80, 81, 83, 86, 89, 90, 92, 95, 96, 98, 99];
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–µ–º–æ –ø–æ–ø–∞—Å—Ç–∏ –Ω–∞ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É
        for (const targetCell of specialCells) {
            // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏
            if (this.usedEventCells.has(targetCell)) {
                continue;
            }
            
            const cellData = this.specialCells[targetCell];
            if (!cellData) continue;
            
            // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π (–∫—Ä—ñ–º –æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–æ—Ä—ñ–≥ —Ç–∞ —Ä–µ—ñ–Ω–∫–∞—Ä–Ω–∞—Ü—ñ—ó)
            if (this.usedEventTypes.has(cellData.type) && 
                cellData.type !== 'alternative-path' && 
                cellData.type !== 'reincarnation') {
                continue;
            }
            
            const distance = targetCell - currentPosition;
            if (distance > 0 && distance <= 6) {
                // –í—Ä–∞—Ö–æ–≤—É—î–º–æ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ —Ä—É—Ö—É –∫–ª–∞—Å—É —Ç–∞ –≥—Ä–∞–≤—Ü—è
                const totalMoveModifier = player.class.moveModifier + player.moveModifier;
                const requiredRoll = distance - totalMoveModifier;
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–µ –≥—Ä–∞–≤–µ—Ü—å –¥—ñ–π—Ç–∏ –¥–æ —Ü—ñ—î—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏
                if (requiredRoll >= 1 && requiredRoll <= 6) {
                    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è —Å–µ–ª—è–Ω–∏–Ω–∞ (–º—ñ–Ω—ñ–º—É–º 1 –∫–ª—ñ—Ç–∏–Ω–∫–∞)
                    if (player.class.id === 'peasant' && requiredRoll + totalMoveModifier < 1) {
                        continue;
                    }
                    
                    roll = requiredRoll;
                    console.log(`üéØ –ö—É–±–∏–∫ –ø—ñ–¥–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π! –ì—Ä–∞–≤–µ—Ü—å ${player.name} (${player.class.name}) –ø–æ—Ç—Ä–∞–ø–∏—Ç—å –Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫—É ${targetCell} –∑ –ø–æ–¥—ñ—î—é ${cellData.type}. –ü–æ—Ç—Ä—ñ–±–Ω–æ ${requiredRoll}, –∑ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º ${totalMoveModifier} = ${requiredRoll + totalMoveModifier} –∫–ª—ñ—Ç–∏–Ω–æ–∫`);
                    break;
                }
            }
        }
        
        // –Ø–∫—â–æ –≤—Å—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ, –∫–∏–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ
        if (roll === Math.floor(Math.random() * 6) + 1) {
            console.log(`üé≤ –í—Å—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ, –∫–∏–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ: ${roll}`);
        }
    
        let move = roll + player.class.moveModifier + player.moveModifier;
    
        if (player.class.id === 'peasant') move = Math.max(1, move);
        
       
        
        const rotations = {
    
    ¬† ¬† ¬† ¬† ¬† ¬† 1: 'rotateY(0deg)',
    
    ¬† ¬† ¬† ¬† ¬† ¬† 2: 'rotateY(-90deg)',
    
    ¬† ¬† ¬† ¬† ¬† ¬† 3: 'rotateY(-180deg)',
    
    ¬† ¬† ¬† ¬† ¬† ¬† 4: 'rotateY(90deg)',
    
    ¬† ¬† ¬† ¬† ¬† ¬† 5: 'rotateX(-90deg)',
    
    ¬† ¬† ¬† ¬† ¬† ¬† 6: 'rotateX(90deg)'
    
    ¬† ¬† ¬† ¬† };
    
    ¬† ¬† ¬† ¬†
    
        this.diceInner.style.transform = `rotateX(${Math.random()*360}deg) rotateY(${Math.random()*360}deg)`;
        
        setTimeout(async () => {
            
            this.diceInner.style.transform = `${rotations[roll]}`;
            
            await this.movePlayer(player, move);
            
        }, 1000);
    
    ¬† ¬† }
    
    ¬† ¬†
    
    ¬† ¬† async movePlayer(player, steps) {
    
    ¬† ¬† ¬† ¬† const startPos = player.position;
    
    ¬† ¬† ¬† ¬† const endPos = Math.min(startPos + steps, this.BOARD_SIZE);
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É –ø–ª–∞–≤–Ω—É –∞–Ω—ñ–º–∞—Ü—ñ—é
    
    ¬† ¬† ¬† ¬† await this.animatePawnMovement(player, startPos, endPos, steps);
    
    ¬† ¬† ¬† ¬†
    
        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –≥—Ä–∞–≤—Ü—è
        player.position = endPos;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä–µ–º–æ–≥—É (–¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏)
        if (endPos >= this.BOARD_SIZE) {
            this.endGame(player, `${player.name} –ø–µ—Ä–µ–º—ñ–≥, –¥–æ—Å—è–≥–Ω—É–≤—à–∏ –∫—ñ–Ω—Ü—è –æ—Å–≤—ñ—Ç–Ω—å–æ–≥–æ —à–ª—è—Ö—É!`);
            return; // –ù–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–¥—ñ—ó –Ω–∞ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ, –±–æ –≥—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–¥—ñ—ó –Ω–∞ –∫—ñ–Ω—Ü–µ–≤—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ
        this.checkCell(player);
    
    ¬† ¬† }
    
    ¬† ¬†
    
    async movePlayerTo(player, position) {
    
        player.position = position;
    
        this.updatePawnPosition(player);
    
        await new Promise(res => setTimeout(res, 300));
    
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä–µ–º–æ–≥—É (–¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏)
        if (position >= this.BOARD_SIZE) {
            this.endGame(player, `${player.name} –ø–µ—Ä–µ–º—ñ–≥, –¥–æ—Å—è–≥–Ω—É–≤—à–∏ –∫—ñ–Ω—Ü—è –æ—Å–≤—ñ—Ç–Ω—å–æ–≥–æ —à–ª—è—Ö—É!`);
            return; // –ù–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–¥—ñ—ó –Ω–∞ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ, –±–æ –≥—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞
        }
    
        this.checkCell(player);
    
    }
    
    ¬† ¬†
    
    checkCell(player) {
        // –í –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–¥—ñ–π –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
        // –í –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ this.specialCells
        if (!this.isOnlineMode && this.specialCells[player.position]) {
            const cellData = this.specialCells[player.position];
            if (cellData) {
                this.handleSpecialCell(player, cellData);
            } else {
                this.nextTurn();
            }
        } else {
            // –í –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—î–º–æ —Ö—ñ–¥
            this.nextTurn();
        }
    }
    
    ¬† ¬†
    
    handleSpecialCell(player, cellData) {
        // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫—É —è–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—É
        this.usedEventCells.add(player.position);
        console.log(`üìç –ö–ª—ñ—Ç–∏–Ω–∫–∞ ${player.position} –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞`);
        
        // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–æ–¥—ñ—ó —è–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π (–∫—Ä—ñ–º –æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–æ—Ä—ñ–≥ —Ç–∞ —Ä–µ—ñ–Ω–∫–∞—Ä–Ω–∞—Ü—ñ—ó)
        if (cellData.type !== 'alternative-path' && cellData.type !== 'reincarnation') {
            this.usedEventTypes.add(cellData.type);
            console.log(`üé≠ –¢–∏–ø –ø–æ–¥—ñ—ó ${cellData.type} –ø–æ–∑–Ω–∞—á–µ–Ω–∏–π —è–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π`);
        }

        switch(cellData.type) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† case 'quest':
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† this.triggerRandomQuest(player);
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† break;
    
    ¬† ¬† ¬† ¬† ¬† ¬† case 'pvp-quest':
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† this.triggerPvpQuest(player);
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† break;
    
            case 'mad-libs-quest':
                this.triggerMadLibsQuest(player);
                break;
    
            case 'webnovella-quest':
                this.triggerWebNovellaQuest(player);
                break;
    
            case 'reincarnation':
                this.triggerReincarnation(player, cellData);
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† break;
    
            case 'machine-uprising':
                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≤—Å—Ç–∞–Ω–Ω—è –º–∞—à–∏–Ω
                this.showQuestModal('–ü–æ–≤—Å—Ç–∞–Ω–Ω—è –º–∞—à–∏–Ω!', 
                    '–ú–∞—à–∏–Ω–∏ –ø–æ–≤—Å—Ç–∞–ª–∏ –ø—Ä–æ—Ç–∏ –ª—é–¥—Å—Ç–≤–∞! –í–∏ –∑–∞–≥–∏–Ω—É–ª–∏ –≤ –±–∏—Ç–≤—ñ –∑ —Ä–æ–±–æ—Ç–∞–º–∏. –ê–ª–µ –Ω–µ –≤—Ç—Ä–∞—á–∞–π—Ç–µ –Ω–∞–¥—ñ—é - –≤–∏ —Ä–µ—ñ–Ω–∫–∞—Ä–Ω—É—î—Ç–µ—Å—è –≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –µ–ø–æ—Å—ñ –¥–ª—è –Ω–æ–≤–æ—ó —Å–ø—Ä–æ–±–∏!', 
                    [
                        { text: '–ó—Ä–æ–∑—É–º—ñ–ª–æ', callback: () => {
                            // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –≥—Ä–∞–≤—Ü—è –Ω–∞ –ø–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—é –∫–ª—ñ—Ç–∏–Ω–∫—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –µ–ø–æ—Ö–∏ (–∫–ª—ñ—Ç–∏–Ω–∫–∞ 75)
                            player.position = 75;
                            player.hasLost = false; // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –≥—Ä–∞–≤—Ü—è
                            
                            // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é —Ñ—ñ—à–∫–∏
                            this.updatePawnPosition(player);
                            
                            
                            this.questModal.classList.add('hidden');
                            this.nextTurn();
                        }}
                    ]
                );
                break;
    
    ¬† ¬† ¬† ¬† ¬† ¬† case 'portal':
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† this.showQuestModal('–¢–∞—î–º–Ω–∏–π –ø–æ—Ä—Ç–∞–ª!', `–†–∏–∑–∏–∫–Ω—É—Ç–∏ —Ç–∞ —Å—Ç—Ä–∏–±–Ω—É—Ç–∏ –Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫—É ${cellData.target} –∑–∞ ${cellData.cost} –û–û?`, [
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† { text: '–¢–∞–∫', callback: () => { this.updatePoints(player, -cellData.cost); this.movePlayerTo(player, cellData.target); this.questModal.classList.add('hidden'); }},
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† { text: '–ù—ñ', callback: () => { this.questModal.classList.add('hidden'); this.nextTurn(); }}
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ]);
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† break;
    
            case 'alternative-path':

                this.showQuestModal('–û–±—Ö—ñ–¥–Ω–∞ –¥–æ—Ä–æ–≥–∞!', `${cellData.description}`, [

                    { text: '–¢–∞–∫', callback: () => { this.updatePoints(player, -cellData.cost); this.movePlayerTo(player, cellData.target); this.questModal.classList.add('hidden'); }},

                    { text: '–ù—ñ', callback: () => { this.questModal.classList.add('hidden'); this.nextTurn(); }}

                ]);

                break;

            case 'test-question':

                this.showTestQuestion(player, player.position);

                break;
    
            default:
                // –Ø–∫—â–æ —î –µ—Ñ–µ–∫—Ç - –≤–∏–∫–æ–Ω—É—î–º–æ –π–æ–≥–æ
                if (cellData.effect) {
                    cellData.effect(player);
                } else {
                    // –Ø–∫—â–æ –Ω–µ–º–∞—î –µ—Ñ–µ–∫—Ç—É - –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–æ–∑—Ä–æ–±–∫—É
                    this.showQuestModal('–ü–æ–¥—ñ—è', '–ü–æ–¥—ñ—è —É —Ä–æ–∑—Ä–æ–±—Ü—ñ. –°–∫–æ—Ä–æ –±—É–¥–µ —Ü—ñ–∫–∞–≤–æ!', [
                        { text: '–ó—Ä–æ–∑—É–º—ñ–ª–æ', callback: () => {
                            this.questModal.classList.add('hidden');
                            this.nextTurn();
                        }}
                    ]);
                    return; // –ù–µ –ø–µ—Ä–µ–¥–∞—î–º–æ —Ö—ñ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
                }
                
                setTimeout(() => this.nextTurn(), 1000);
                break;
    
    ¬† ¬† ¬† ¬† }
    
    ¬† ¬† }
    
    ¬† ¬†
    
    ¬† ¬† // –ö–≤–µ—Å—Ç–∏ —Ç–∞ –ø–æ–¥—ñ—ó
    
    ¬† ¬† triggerRandomQuest(player) {
    
    ¬† ¬† ¬† ¬† const questTypes = ['simple', 'pvp', 'creative'];
    
    ¬† ¬† ¬† ¬† const questType = questTypes[Math.floor(Math.random() * questTypes.length)];
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† if (questType === 'simple') {
    
    ¬† ¬† ¬† ¬† ¬† ¬† const simpleQuests = [
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† { title: '–ó–Ω–∞–π—à–æ–≤ —Å—Ç–∞—Ä–æ–≤–∏–Ω–Ω—É –∫–Ω–∏–≥—É!', reward: 15, description: '–í–∏ –∑–Ω–∞–π—à–ª–∏ —Ü—ñ–Ω–Ω—É –∫–Ω–∏–≥—É –≤ –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ.' },
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† { title: '–î–æ–ø–æ–º—ñ–≥ –≤—á–∏—Ç–µ–ª—é!', reward: 20, description: '–í–∏ –¥–æ–ø–æ–º–æ–≥–ª–∏ –≤—á–∏—Ç–µ–ª—é –∑ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—î—é —É—Ä–æ–∫—É.' },
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† { title: '–í–∏–≤—á–∏–≤ –Ω–æ–≤—É –º–æ–≤—É!', reward: 25, description: '–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–≤—á–∏–ª–∏ –æ—Å–Ω–æ–≤–∏ –Ω–æ–≤–æ—ó –º–æ–≤–∏.' },
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† { title: '–°—Ç–≤–æ—Ä–∏–≤ –Ω–∞—É–∫–æ–≤–∏–π –ø—Ä–æ–µ–∫—Ç!', reward: 30, description: '–í–∞—à –ø—Ä–æ–µ–∫—Ç –æ—Ç—Ä–∏–º–∞–≤ –≤–∏–∑–Ω–∞–Ω–Ω—è.' },
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† { title: '–ü–µ—Ä–µ–º—ñ–≥ —É –æ–ª—ñ–º–ø—ñ–∞–¥—ñ!', reward: 40, description: '–í–∏ –ø–æ—Å—ñ–ª–∏ –ø–µ—Ä—à–µ –º—ñ—Å—Ü–µ –≤ –æ–ª—ñ–º–ø—ñ–∞–¥—ñ.' }
    
    ¬† ¬† ¬† ¬† ¬† ¬† ];
    
    ¬† ¬† ¬† ¬† ¬† ¬† const quest = simpleQuests[Math.floor(Math.random() * simpleQuests.length)];
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.updatePoints(player, quest.reward, quest.title);
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.showQuestModal(quest.title, quest.description, [
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† { text: '–î–∞–ª—ñ', callback: () => {
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† this.questModal.classList.add('hidden');
    
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† this.nextTurn();
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† }}
    
    ¬† ¬† ¬† ¬† ¬† ¬† ]);
    
    ¬† ¬† ¬† ¬† } else if (questType === 'pvp') {
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.triggerPvpQuest(player);
    
    ¬† ¬† ¬† ¬† } else {
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.triggerCreativeQuest(player);
    
    ¬† ¬† ¬† ¬† }
    
    ¬† ¬† }
    
    ¬† ¬†
    
    ¬† ¬† // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    
    ¬† ¬† updatePoints(player, amount, reason = "", showModal = false) {
    
    ¬† ¬† ¬† ¬† player.points += amount;
    
    
    ¬† ¬† ¬† ¬† this.updateUI();
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† if (showModal && reason) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.showQuestModal(reason, `${player.name} –æ—Ç—Ä–∏–º–∞–≤ ${amount > 0 ? '+' : ''}${amount} –û—á–æ–∫ –û—Å–≤—ñ—Ç–∏!`, [
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† { text: '–î–∞–ª—ñ', callback: () => { this.questModal.classList.add('hidden'); this.nextTurn(); }}
    
    ¬† ¬† ¬† ¬† ¬† ¬† ]);
    
    ¬† ¬† ¬† ¬† }
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† if (player.points >= this.WIN_CONDITION_POINTS) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.endGame(player);
    
    ¬† ¬† ¬† ¬† }
    
    ¬† ¬† }
    
    ¬† ¬†
    
    ¬† ¬† nextTurn() {
    
    ¬† ¬† ¬† ¬† if (!this.gameActive) return;
    
    ¬† ¬† ¬† ¬† const player = this.players[this.currentPlayerIndex];
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† if (player.extraTurn) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† player.extraTurn = false;
    
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.rollDiceBtn.disabled = false;
    
    ¬† ¬† ¬† ¬† ¬† ¬† return;
    
    ¬† ¬† ¬† ¬† }
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† if (player.skipTurn) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† player.skipTurn = false;
    
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.showQuestModal('–ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É', `${player.name} –ø—Ä–æ–ø—É—Å–∫–∞—î —Ü–µ–π —Ö—ñ–¥ —á–µ—Ä–µ–∑ –ø–æ–¥—ñ—é.`, [
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† { text: '–ó—Ä–æ–∑—É–º—ñ–ª–æ', callback: () => { this.questModal.classList.add('hidden'); this.nextTurn(); }}
    
    ¬† ¬† ¬† ¬† ¬† ¬† ]);
    
    ¬† ¬† ¬† ¬† ¬† ¬† return;
    
    ¬† ¬† ¬† ¬† }
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† do {
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.currentPlayerIndex = (this.currentPlayerIndex + 1) % this.players.length;
    
    ¬† ¬† ¬† ¬† } while (this.players[this.currentPlayerIndex].hasLost);
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† this.updateUI();
    
    
    ¬† ¬† ¬† ¬† this.rollDiceBtn.disabled = false;
    
    ¬† ¬† }
    
    ¬† ¬†
    
    ¬† ¬† updateUI() {
    
    ¬† ¬† ¬† ¬† const player = this.players[this.currentPlayerIndex];
    
    ¬† ¬† ¬† ¬† this.currentPlayerNameEl.textContent = player.name;
    
    ¬† ¬† ¬† ¬† this.currentPlayerNameEl.style.color = player.color;
    
    ¬† ¬† ¬† ¬† this.currentPlayerClassEl.textContent = player.class ? player.class.name : '‚Äî';
    
    ¬† ¬† ¬† ¬† this.currentPlayerPointsEl.textContent = player.points;
    
    ¬† ¬† ¬† ¬† this.leaderboardEl.innerHTML = `<h3 class="text-lg font-semibold mt-2">–¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤</h3>` +
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.players.filter(p => !p.hasLost).sort((a,b) => b.points - a.points).map(p =>
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† `<div style="color:${p.color};">${p.name}: ${p.points} –û–û</div>`
    
    ¬† ¬† ¬† ¬† ¬† ¬† ).join('');
    
    ¬† ¬† }
    
    ¬† ¬†
    
    updatePawnPosition(player) {

        const pawn = document.getElementById(`pawn-${player.id}`);

        const cell = document.getElementById(`cell-${player.position}`);

        if (cell && pawn) {

            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫–ª—ñ—Ç–∏–Ω–∫–∏ –≤—ñ–¥–Ω–æ—Å–Ω–æ –¥–æ—à–∫–∏
            const cellRect = cell.getBoundingClientRect();
            const boardRect = this.gameBoard.getBoundingClientRect();
            
            // –ü–æ–∑–∏—Ü—ñ–æ–Ω—É—î–º–æ —Ñ—ñ—à–∫—É –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—ñ–¥–Ω–æ—Å–Ω–æ –¥–æ—à–∫–∏
            pawn.style.position = 'absolute';
            pawn.style.left = `${cellRect.left - boardRect.left + cellRect.width / 2 - 37.5}px`;
            pawn.style.top = `${cellRect.top - boardRect.top + cellRect.height / 2 - 37.5}px`;
            pawn.style.zIndex = '10';

            this.centerViewOn(cell);

        }

    }
    
    ¬† ¬†
    
    ¬† ¬† // –ü–ª–∞–≤–Ω–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è —Ä—É—Ö—É —Ñ—ñ—à–∫–∏ –ø–æ–∫—Ä–æ–∫–æ–≤–æ
    
    async animatePawnMovement(player, fromPosition, toPosition, steps) {
        // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—É –ø–æ—á–∞—Ç–∫–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
        fromPosition = Math.max(0, fromPosition);
        console.log(`–ê–Ω—ñ–º–∞—Ü—ñ—è —Ä—É—Ö—É ${player.name} –∑ ${fromPosition} –¥–æ ${toPosition}, –∫—Ä–æ–∫—ñ–≤: ${steps}`);
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† const pawn = document.getElementById(`pawn-${player.id}`);
    
    ¬† ¬† ¬† ¬† if (!pawn) return;
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É –∫–∏–¥–∞–Ω–Ω—è –∫—É–±–∏–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω—ñ–º–∞—Ü—ñ—ó
    
    ¬† ¬† ¬† ¬† this.rollDiceBtn.disabled = true;
    
    ¬† ¬† ¬† ¬† this.rollDiceBtn.style.opacity = '0.5';
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å —Ä—É—Ö—É
    
    ¬† ¬† ¬† ¬† pawn.classList.add('moving');
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –Ø–∫—â–æ —Ä—É—Ö –¥–∞–ª–µ–∫–∏–π, –¥–æ–¥–∞—î–º–æ –µ—Ñ–µ–∫—Ç –≤—ñ—Ç—Ä—É
    
    ¬† ¬† ¬† ¬† if (steps > 3) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† pawn.classList.add('wind-effect');
    
    ¬† ¬† ¬† ¬† }
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† try {
    
    ¬† ¬† ¬† ¬† ¬† ¬† // –†—É—Ö–∞—î–º–æ—Å—è –ø–æ–∫—Ä–æ–∫–æ–≤–æ
    
    ¬† ¬† ¬† ¬† ¬† ¬† for (let i = 1; i <= steps; i++) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† const currentPosition = fromPosition + i;
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ —Ñ—ñ—à–∫—É –Ω–∞ –ø–æ—Ç–æ—á–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† await this.movePawnToCell(pawn, currentPosition);
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫—Ä–æ–∫–∞–º–∏
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† await this.sleep(250);
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–¥—ñ—ó –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† if (i === steps) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† // –û—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–¥—ñ—ó
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† const cellData = this.specialCells[currentPosition];
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† if (cellData) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† console.log(`–ì—Ä–∞–≤–µ—Ü—å ${player.name} –ø–æ—Ç—Ä–∞–ø–∏–≤ –Ω–∞ –ø–æ–¥—ñ—é –Ω–∞ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ ${currentPosition}`);
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† await this.handleSpecialCell(player, cellData);
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† }
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† }
    
    ¬† ¬† ¬† ¬† ¬† ¬† }
    
    ¬† ¬† ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† ¬† ¬† // –î–æ–¥–∞—î–º–æ –µ—Ñ–µ–∫—Ç –ø—Ä–∏–∑–µ–º–ª–µ–Ω–Ω—è
    
    ¬† ¬† ¬† ¬† ¬† ¬† pawn.classList.remove('moving');
    
    ¬† ¬† ¬† ¬† ¬† ¬† pawn.classList.add('landing');
    
    ¬† ¬† ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† ¬† ¬† // –î–æ–¥–∞—î–º–æ —Å–ª—ñ–¥
    
    ¬† ¬† ¬† ¬† ¬† ¬† pawn.classList.add('trail');
    
    ¬† ¬† ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† ¬† ¬† // –û—á–∏—â—É—î–º–æ –µ—Ñ–µ–∫—Ç–∏ –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    
    ¬† ¬† ¬† ¬† ¬† ¬† setTimeout(() => {
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† pawn.classList.remove('landing', 'trail', 'wind-effect');
    
    ¬† ¬† ¬† ¬† ¬† ¬† }, 600);
    
    ¬† ¬† ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† } catch (error) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω—ñ–º–∞—Ü—ñ—ó:', error);
    
    ¬† ¬† ¬† ¬† } finally {
    
    ¬† ¬† ¬† ¬† ¬† ¬† // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.rollDiceBtn.disabled = false;
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.rollDiceBtn.style.opacity = '1';
    
    ¬† ¬† ¬† ¬† }
    
    ¬† ¬† }
    
    ¬† ¬†
    
    ¬† ¬† // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ñ—ñ—à–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É
    
    ¬† ¬† async movePawnToCell(pawn, cellPosition) {
    
    ¬† ¬† ¬† ¬† return new Promise((resolve) => {
    
    ¬† ¬† ¬† ¬† ¬† ¬† const targetCell = document.getElementById(`cell-${cellPosition}`);
    
    ¬† ¬† ¬† ¬† ¬† ¬† if (!targetCell) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† resolve();
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† return;
    
    ¬† ¬† ¬† ¬† ¬† ¬† }
    
    ¬† ¬† ¬† ¬† ¬† ¬†
    
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫–ª—ñ—Ç–∏–Ω–∫–∏ –≤—ñ–¥–Ω–æ—Å–Ω–æ –¥–æ—à–∫–∏
            const cellRect = targetCell.getBoundingClientRect();
            const boardRect = this.gameBoard.getBoundingClientRect();
            
            // –ü–æ–∑–∏—Ü—ñ–æ–Ω—É—î–º–æ —Ñ—ñ—à–∫—É –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—ñ–¥–Ω–æ—Å–Ω–æ –¥–æ—à–∫–∏
            pawn.style.position = 'absolute';
            pawn.style.left = `${cellRect.left - boardRect.left + cellRect.width / 2 - 37.5}px`;
            pawn.style.top = `${cellRect.top - boardRect.top + cellRect.height / 2 - 37.5}px`;
            pawn.style.zIndex = '10';
            
            // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—É–∫ —Ä—É—Ö—É —Ñ—ñ—à–∫–∏ –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é
            setTimeout(() => {
                this.playChipMoveSound();
            }, 100);
    
    ¬† ¬† ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† ¬† ¬† // –¶–µ–Ω—Ç—Ä—É—î–º–æ –≤–∏–¥ –Ω–∞ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ
    
    ¬† ¬† ¬† ¬† ¬† ¬† this.centerViewOn(targetCell);
    
    ¬† ¬† ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† ¬† ¬† // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è CSS transition
    
    ¬† ¬† ¬† ¬† ¬† ¬† setTimeout(resolve, 250);
    
    ¬† ¬† ¬† ¬† });
    
    ¬† ¬† }
    
    ¬† ¬†
    
    ¬† ¬† // –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –∑–∞—Ç—Ä–∏–º–∫–∏
    
    ¬† ¬† sleep(ms) {
    
    ¬† ¬† ¬† ¬† return new Promise(resolve => setTimeout(resolve, ms));
    
    ¬† ¬† }
    
    ¬† ¬†
    
    ¬† ¬† // –¢–µ–ª–µ–ø–æ—Ä—Ç –º—ñ–∂ –µ–ø–æ—Ö–∞–º–∏
    
    ¬† ¬† async teleportToNextEpoch(player, nextEpochId) {
    
    ¬† ¬† ¬† ¬† const nextEpoch = this.epochs.find(e => e.id === nextEpochId);
    
    ¬† ¬† ¬† ¬† if (!nextEpoch) return;
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† console.log(`${player.name} —Ç–µ–ª–µ–ø–æ—Ä—Ç—É—î—Ç—å—Å—è –¥–æ –µ–ø–æ—Ö–∏ ${nextEpoch.name}`);
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é —Ç–µ–ª–µ–ø–æ—Ä—Ç—É
    
    ¬† ¬† ¬† ¬† await this.showTeleportAnimation(player, nextEpoch);
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –≥—Ä–∞–≤—Ü—è –Ω–∞ –ø–µ—Ä—à—É –∫–ª—ñ—Ç–∏–Ω–∫—É –Ω–æ–≤–æ—ó –µ–ø–æ—Ö–∏
    
    ¬† ¬† ¬† ¬† const newPosition = nextEpoch.startCell;
    
    ¬† ¬† ¬† ¬† const oldPosition = player.position;
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† player.position = newPosition;
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–º—ñ—â—É—î–º–æ —Ñ—ñ—à–∫—É
    
    ¬† ¬† ¬† ¬† await this.movePawnToCell(document.getElementById(`pawn-${player.id}`), newPosition);
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –¶–µ–Ω—Ç—Ä—É—î–º–æ –∫–∞–º–µ—Ä—É –Ω–∞ –Ω–æ–≤—ñ–π –µ–ø–æ—Å—ñ
    
    ¬† ¬† ¬† ¬† this.centerViewOnEpoch(nextEpochId);
    
    ¬† ¬† ¬† ¬†
    
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–¥—ñ—ó –Ω–∞ –Ω–æ–≤—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ
    
    ¬† ¬† ¬† ¬† this.checkCell(player);
    
    ¬† ¬† }
    
    ¬† ¬†
    
    ¬† ¬† // –ê–Ω—ñ–º–∞—Ü—ñ—è —Ç–µ–ª–µ–ø–æ—Ä—Ç—É
    
    ¬† ¬† async showTeleportAnimation(player, epoch) {
    
    ¬† ¬† ¬† ¬† const pawn = document.getElementById(`pawn-${player.id}`);
    
    ¬† ¬† ¬† ¬† if (!pawn) return;
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å —Ç–µ–ª–µ–ø–æ—Ä—Ç—É
    
    ¬† ¬† ¬† ¬† pawn.classList.add('teleporting');
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –ü–æ–∫–∞–∑—É—î–º–æ –µ—Ñ–µ–∫—Ç —Å–≤—ñ—Ç–ª–∞
    
    ¬† ¬† ¬† ¬† const lightEffect = document.createElement('div');
    
    ¬† ¬† ¬† ¬† lightEffect.style.position = 'absolute';
    
    ¬† ¬† ¬† ¬† lightEffect.style.top = pawn.style.top;
    
    ¬† ¬† ¬† ¬† lightEffect.style.left = pawn.style.left;
    
    ¬† ¬† ¬† ¬† lightEffect.style.width = '60px';
    
    ¬† ¬† ¬† ¬† lightEffect.style.height = '60px';
    
    ¬† ¬† ¬† ¬† lightEffect.style.background = `radial-gradient(circle, ${epoch.color} 0%, transparent 70%)`;
    
    ¬† ¬† ¬† ¬† lightEffect.style.borderRadius = '50%';
    
    ¬† ¬† ¬† ¬† lightEffect.style.transform = 'translate(-50%, -50%)';
    
    ¬† ¬† ¬† ¬† lightEffect.style.animation = 'teleportFlash 0.8s ease-out';
    
    ¬† ¬† ¬† ¬† lightEffect.style.pointerEvents = 'none';
    
    ¬† ¬† ¬† ¬† lightEffect.style.zIndex = '10';
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† this.gameBoard.appendChild(lightEffect);
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    
    ¬† ¬† ¬† ¬† await this.sleep(800);
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞—Å —Ç–µ–ª–µ–ø–æ—Ä—Ç—É
    
    ¬† ¬† ¬† ¬† pawn.classList.remove('teleporting');
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† // –í–∏–¥–∞–ª—è—î–º–æ –µ—Ñ–µ–∫—Ç —Å–≤—ñ—Ç–ª–∞
    
    ¬† ¬† ¬† ¬† lightEffect.remove();
    
    ¬† ¬† }
    
    ¬† ¬†
    
    ¬† ¬† // –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏ –Ω–∞ –µ–ø–æ—Å—ñ
    
    centerViewOnEpoch(epochId) {
        // –í–ò–ú–ö–ù–ï–ù–û: –§–æ–∫—É—Å—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ - –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—á–Ω–∞
        console.log('üö´ centerViewOnEpoch() –≤–∏–º–∫–Ω–µ–Ω–æ - –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—á–Ω–∞');
        return; // –ù–µ —Ä–æ–±–∏–º–æ –Ω—ñ—á–æ–≥–æ
    }
    
    ¬† ¬†
    
    
    ¬† ¬†
    
    ¬† ¬† endGame(winner, customMessage = "") {
    
    ¬† ¬† ¬† ¬† if (!this.gameActive) return;
    
    ¬† ¬† ¬† ¬† this.gameActive = false;
    
    ¬† ¬† ¬† ¬† this.rollDiceBtn.disabled = true;
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† let message;
    
    ¬† ¬† ¬† ¬† if (customMessage) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† message = customMessage;
    
    ¬† ¬† ¬† ¬† } else if(winner) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† message = `–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: ${winner.name}, —è–∫–∏–π –Ω–∞–±—Ä–∞–≤ ${winner.points} –û–û!`;
    
    ¬† ¬† ¬† ¬† } else {
    
    ¬† ¬† ¬† ¬† ¬† ¬† const sortedPlayers = this.players.filter(p => !p.hasLost).sort((a,b) => b.points - a.points);
    
    ¬† ¬† ¬† ¬† ¬† ¬† if (sortedPlayers.length > 0) {
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† message = `–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ–º—ñ–≥ ${sortedPlayers[0].name} –∑ ${sortedPlayers[0].points} –û–û!`;
    
    ¬† ¬† ¬† ¬† ¬† ¬† } else {
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† message = `–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ú–∞—à–∏–Ω–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏.`;
    
    ¬† ¬† ¬† ¬† ¬† ¬† }
    
    ¬† ¬† ¬† ¬† }
    
    ¬† ¬† ¬† ¬†
    
    
    ¬† ¬† ¬† ¬† const contentHTML = `
    
    ¬† ¬† ¬† ¬† ¬† ¬† <h2 class="text-4xl font-bold text-yellow-400 mb-4">–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</h2>
    
    ¬† ¬† ¬† ¬† ¬† ¬† <p class="text-2xl mb-6">${message}</p>
    
    ¬† ¬† ¬† ¬† ¬† ¬† <button id="restart-game-btn" class="w-full mt-6 bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded-lg transition duration-300 text-xl">–ì—Ä–∞—Ç–∏ –∑–Ω–æ–≤—É</button>
    
    ¬† ¬† ¬† ¬† `;
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† this.showQuestModalWithContent(contentHTML, () => {
    
    ¬† ¬† ¬† ¬† ¬† ¬† document.getElementById('restart-game-btn').addEventListener('click', () => location.reload());
    
    ¬† ¬† ¬† ¬† });
    
    ¬† ¬† }
    
    ¬† ¬†
    
    ¬† ¬† showQuestModal(title, text, buttons) {
    
    ¬† ¬† ¬† ¬† let buttonsHTML = buttons.map((btn, index) =>
    
    ¬† ¬† ¬† ¬† ¬† ¬† `<button id="modal-btn-${index}" class="px-4 py-2 rounded-lg text-white font-semibold transition ${index === 0 ? 'bg-green-500 hover:bg-green-600' : 'bg-red-500 hover:bg-red-600'}">${btn.text}</button>`
    
    ¬† ¬† ¬† ¬† ).join(' ');
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† const contentHTML = `
    
    ¬† ¬† ¬† ¬† ¬† ¬† <h3 class="text-2xl font-bold mb-2">${title}</h3>
    
    ¬† ¬† ¬† ¬† ¬† ¬† <div class="text-lg mb-6">${text}</div>
    
    ¬† ¬† ¬† ¬† ¬† ¬† <div class="flex justify-center gap-4">${buttonsHTML}</div>
    
    ¬† ¬† ¬† ¬† `;
    
    ¬† ¬† ¬† ¬†
    
    ¬† ¬† ¬† ¬† this.showQuestModalWithContent(contentHTML, () => {
    
    ¬† ¬† ¬† ¬† ¬† ¬† buttons.forEach((btn, index) => {
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† document.getElementById(`modal-btn-${index}`).onclick = () => {
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† if (btn.callback) btn.callback();
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† };
    
    ¬† ¬† ¬† ¬† ¬† ¬† });
    
    ¬† ¬† ¬† ¬† });
    
    ¬† ¬† }
    
    ¬† ¬†
    
    ¬† ¬† showQuestModalWithContent(html, setupCallback) {
    
    ¬† ¬† ¬† ¬† this.questModalContent.innerHTML = html;
    
    ¬† ¬† ¬† ¬† this.questModalContent.classList.remove('modal-shake', 'modal-pulse-green');
    
    ¬† ¬† ¬† ¬† this.questModal.classList.remove('hidden');
    
    ¬† ¬† ¬† ¬† if(setupCallback) setupCallback(this.questModalContent);
    
    ¬† ¬† }
    
    ¬† ¬†
    
    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è PvP —Ç–∞ Creative –∫–≤–µ—Å—Ç—ñ–≤ (–±—É–¥—É—Ç—å —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—ñ–∑–Ω—ñ—à–µ)
    
    triggerPvpQuest(player) {
    
    
        this.nextTurn();
    
    }
    
   
    
    triggerCreativeQuest(player) {
    
    
        this.nextTurn();
    
    }

    triggerMadLibsQuest(player) {
        this.nextTurn();
    }

    triggerWebNovellaQuest(player) {
        this.nextTurn();
    }

    triggerReincarnation(player, cellData) {
        this.updatePoints(player, cellData.points, `–†–µ—ñ–Ω–∫–∞—Ä–Ω–∞—Ü—ñ—è! +${cellData.points} –û–û.`, true);
        this.nextTurn();
    }
    
    // –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏
    handleZoom(e) {
        // –í–ò–ú–ö–ù–ï–ù–û: –ó—É–º –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π - –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—á–Ω–∞
        e.preventDefault();
        return; // –ù–µ —Ä–æ–±–∏–º–æ –Ω—ñ—á–æ–≥–æ
    }
    
    // –û–±–º–µ–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏
    constrainTranslation() {
        // –í–ò–ú–ö–ù–ï–ù–û: –û–±–º–µ–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
        console.log('üö´ constrainTranslation() –≤–∏–º–∫–Ω–µ–Ω–æ - –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—á–Ω–∞');
        return; // –ù–µ —Ä–æ–±–∏–º–æ –Ω—ñ—á–æ–≥–æ
    }
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É
    setInitialScale() {
        console.log('üîß setInitialScale() –≤–∏–∫–ª–∏–∫–∞–Ω–æ (–¥—Ä—É–≥–∞ —Ñ—É–Ω–∫—Ü—ñ—è)');
        console.log('üîç –ü–ï–†–ï–î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è–º translateY:', this.translateY);
        
        // –í–ò–ú–ö–ù–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
        this.scale = 1; // –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π –º–∞—Å—à—Ç–∞–± 1:1
        this.translateX = 0; // –ë–µ–∑ –∑–º—ñ—â–µ–Ω–Ω—è
        this.translateY = 0; // –ë–µ–∑ –∑–º—ñ—â–µ–Ω–Ω—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—ñ
        
        console.log('üîç –ü–Ü–°–õ–Ø –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è translateY:', this.translateY);
        
        console.log('üìä –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π –º–∞—Å—à—Ç–∞–± –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–¥—Ä—É–≥–∞ —Ñ—É–Ω–∫—Ü—ñ—è):', {
            scale: this.scale,
            translateX: this.translateX,
            translateY: this.translateY
        });
    }
    
    // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    applyTransform() {
        if (this.gameBoardContainer) {
            const transformString = `translate(${this.translateX}px, ${this.translateY}px) scale(${this.scale})`;
            this.gameBoardContainer.style.transform = transformString;
        }
    }
    
    // –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –Ω–∞ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ
    centerViewOn(cell) {
        // –í–ò–ú–ö–ù–ï–ù–û: –§–æ–∫—É—Å—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ - –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—á–Ω–∞
        console.log('üö´ centerViewOn() –≤–∏–º–∫–Ω–µ–Ω–æ - –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—á–Ω–∞');
        return; // –ù–µ —Ä–æ–±–∏–º–æ –Ω—ñ—á–æ–≥–æ
    }
    
    // –ü–æ–∫–∞–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
    showTestQuestion(player, cellNumber) {
        const questionData = window.TEST_QUESTIONS[cellNumber];
        if (!questionData) {
            console.error(`–¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∫–ª—ñ—Ç–∏–Ω–∫–∏ ${cellNumber} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
            this.nextTurn();
            return;
        }

        let modalContent = `
            <h3 class="text-2xl font-bold mb-4">üìù –¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è</h3>
            <p class="mb-4 text-lg">${questionData.question}</p>
            <div class="space-y-3">
        `;

        // –î–æ–¥–∞—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        Object.entries(questionData.options).forEach(([key, value]) => {
            modalContent += `
                <button class="w-full p-3 text-left border-2 border-gray-300 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-colors test-option-btn" data-answer="${key}">
                    <span class="font-bold">${key})</span> ${value}
                </button>
            `;
        });

        modalContent += `
            </div>
            <div class="mt-4 text-center">
                <button class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded" onclick="document.getElementById('quest-modal').classList.add('hidden')">
                    –ó–∞–∫—Ä–∏—Ç–∏
                </button>
            </div>
        `;

        this.showQuestModal('–¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è', modalContent, [], null);

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        setTimeout(() => {
            document.querySelectorAll('.test-option-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const selectedAnswer = e.currentTarget.dataset.answer;
                    const isCorrect = selectedAnswer === questionData.correctAnswer;
                    
                    // –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    this.showTestResult(player, isCorrect, questionData.correctAnswer, selectedAnswer);
                });
            });
        }, 100);
    }

    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ç–µ—Å—Ç—É
    showTestResult(player, isCorrect, correctAnswer, selectedAnswer) {
        const resultText = isCorrect ? 
            `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ 5 –û–û!` : 
            `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${correctAnswer}`;

        let modalContent = `
            <h3 class="text-2xl font-bold mb-4">${isCorrect ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}</h3>
            <p class="mb-4 text-lg">${resultText}</p>
            <div class="text-center">
                <button class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded" onclick="document.getElementById('quest-modal').classList.add('hidden')">
                    –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏
                </button>
            </div>
        `;

        this.showQuestModal('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É', modalContent, [], null);

        // –î–æ–¥–∞—î–º–æ –æ—á–∫–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        if (isCorrect) {
            this.updatePoints(player, 5);
        }

        // –ü–µ—Ä–µ–¥–∞—î–º–æ —Ö—ñ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –≥—Ä–∞–≤—Ü—é
        setTimeout(() => {
            this.nextTurn();
        }, 1000);
    }
    
    // –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏
    startPanning(e) {
        // –í–ò–ú–ö–ù–ï–ù–û: –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ - –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—á–Ω–∞
        e.preventDefault();
        return; // –ù–µ —Ä–æ–±–∏–º–æ –Ω—ñ—á–æ–≥–æ
    }
    
    // –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏
    handlePanning(e) {
        // –í–ò–ú–ö–ù–ï–ù–û: –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ - –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—á–Ω–∞
        e.preventDefault();
        return; // –ù–µ —Ä–æ–±–∏–º–æ –Ω—ñ—á–æ–≥–æ
    }
    
    // –ó—É–ø–∏–Ω–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏
    stopPanning() {
        // –í–ò–ú–ö–ù–ï–ù–û: –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ - –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—á–Ω–∞
        return; // –ù–µ —Ä–æ–±–∏–º–æ –Ω—ñ—á–æ–≥–æ
    }
    
    }
    
    
    
    // –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
    
    window.EducationalPathGame = EducationalPathGame;
