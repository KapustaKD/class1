// –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –≥—Ä–∏
document.addEventListener('DOMContentLoaded', () => {
    console.log('üì¶ DOMContentLoaded - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª–∞—Å—ñ–≤...');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–ª–∞—Å–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
    console.log('EducationalPathGame:', typeof EducationalPathGame);
    console.log('MultiplayerGame:', typeof MultiplayerGame);
    console.log('GameUI:', typeof GameUI);
    
    if (typeof GameUI === 'undefined') {
        console.error('‚ùå GameUI –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ui.js');
        return;
    }
    
    if (typeof EducationalPathGame === 'undefined') {
        console.error('‚ùå EducationalPathGame –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ game.js');
        return;
    }
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ UI
    try {
        window.gameUI = new GameUI();
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è GameUI:', error);
        return;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω –≥—Ä–∏
    const savedGameState = localStorage.getItem('educationalPathGameState');
    if (savedGameState) {
        try {
            let gameState;
            try {
                gameState = JSON.parse(savedGameState);
            } catch (parseError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON:', parseError);
                console.error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π JSON:', savedGameState);
                // –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å—Ç–∞–Ω
                localStorage.removeItem('educationalPathGameState');
                // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
                gameState = null;
            }
            
            if (!gameState) {
                // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –≥—Ä—É
                if (typeof MultiplayerGame !== 'undefined') {
                    window.game = new MultiplayerGame();
                } else {
                    console.error('‚ùå MultiplayerGame –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ EducationalPathGame');
                    window.game = new EducationalPathGame();
                }
                return; // –í–∏—Ö–æ–¥–∏–º–æ, –±–æ –≤–∂–µ —Å—Ç–≤–æ—Ä–∏–ª–∏ –≥—Ä—É
            }
            console.log('üîÑ –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω –≥—Ä–∏:', gameState);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª–∞—Å MultiplayerGame –¥–æ—Å—Ç—É–ø–Ω–∏–π
            if (typeof MultiplayerGame === 'undefined') {
                console.error('‚ùå MultiplayerGame –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ multiplayer.js');
                // –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—É –≥—Ä—É
                window.game = new EducationalPathGame();
            } else {
                // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≥—Ä—É –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–º —Å—Ç–∞–Ω–æ–º
                window.game = new MultiplayerGame();
            }
            
            // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≥—Ä–∏
            if (gameState.isOnlineMode && gameState.roomId) {
                // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ–Ω–ª–∞–π–Ω –≥—Ä—É
                window.game.isOnlineMode = true;
                window.game.roomId = gameState.roomId;
                window.game.playerName = gameState.playerName;
                window.game.playerId = gameState.playerId;
                
                // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏
                setTimeout(() => {
                    window.game.connectToRoom(gameState.roomId, gameState.playerName);
                }, 1000);
            } else if (gameState.isLocalMode) {
                // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—É –≥—Ä—É
                window.game.startLocalMode();
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≥—Ä–∏:', error);
            // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –≥—Ä—É
            if (typeof MultiplayerGame !== 'undefined') {
                window.game = new MultiplayerGame();
            } else {
                console.error('‚ùå MultiplayerGame –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ EducationalPathGame');
                window.game = new EducationalPathGame();
            }
        }
    } else {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–≤—É –≥—Ä—É
        if (typeof MultiplayerGame !== 'undefined') {
            window.game = new MultiplayerGame();
        } else {
            console.error('‚ùå MultiplayerGame –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ EducationalPathGame');
            window.game = new EducationalPathGame();
        }
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –ø–µ—Ä–µ–¥ –≤–∏–∫–ª–∏–∫–æ–º
    if (typeof setupGlobalEventListeners === 'function') {
        setupGlobalEventListeners();
    } else {
        console.error('‚ùå setupGlobalEventListeners –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ');
    }
    
    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∑–≤—É–∫–∏
    if (typeof setupGlobalSounds === 'function') {
        setupGlobalSounds();
    } else {
        console.warn('‚ö†Ô∏è setupGlobalSounds –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ');
    }
    
    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –º—É–∑–∏–∫–∏
    if (typeof setupMusicController === 'function') {
        setupMusicController();
    } else {
        console.warn('‚ö†Ô∏è setupMusicController –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ');
    }
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º—ñ–≤
    if (typeof setupModeButtons === 'function') {
        setupModeButtons();
    } else {
        console.warn('‚ö†Ô∏è setupModeButtons –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ');
    }
    
    console.log('üéÆ –û—Å–≤—ñ—Ç–Ω—ñ–π –®–ª—è—Ö: –†–µ–≤–æ–ª—é—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!');
});

function setupGlobalEventListeners() {
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    window.addEventListener('error', (event) => {
        console.error('–ü–æ–º–∏–ª–∫–∞:', event.error);
        if (window.gameUI) {
            window.gameUI.showNotification('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.', 'error');
        }
    });
    
    // –û–±—Ä–æ–±–∫–∞ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –≤—ñ–¥—Ö–∏–ª–µ–Ω—å –ø—Ä–æ–º—ñ—Å—ñ–≤
    window.addEventListener('unhandledrejection', (event) => {
        console.error('–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ø—Ä–æ–º—ñ—Å—É:', event.reason);
        if (window.gameUI) {
            window.gameUI.showNotification('–ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç.', 'warning');
        }
    });
    
    // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
    window.addEventListener('resize', GameUtils.debounce(() => {
        // –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—É
        if (window.game && window.game.gameActive) {
            window.game.applyTransform();
        }
    }, 250));
    
    // –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à
    document.addEventListener('keydown', (event) => {
        // ESC - –∑–∞–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞
        if (event.key === 'Escape') {
            const openModal = document.querySelector('.modal-backdrop:not(.hidden)');
            if (openModal) {
                openModal.classList.add('hidden');
            }
        }
        
        // Enter - –∫–∏–Ω—É—Ç–∏ –∫—É–±–∏–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ
        // if (event.key === 'Enter' && window.game && window.game.gameActive) {
        //     const rollBtn = document.getElementById('roll-dice-btn');
        //     if (rollBtn && !rollBtn.disabled) {
        //         rollBtn.click();
        //     }
        // }
        
        // R - –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≥—Ä—É
        if (event.key === 'r' || event.key === 'R') {
            if (event.ctrlKey || event.metaKey) {
                event.preventDefault();
                location.reload();
            }
        }
    });
    
    // –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –º–æ–¥–∞–ª—å–Ω–∏–º–∏ –≤—ñ–∫–Ω–∞–º–∏
    document.addEventListener('click', (event) => {
        if (event.target.classList.contains('modal-backdrop')) {
            event.target.classList.add('hidden');
        }
    });
}

function setupModeButtons() {
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó –≥—Ä–∏ (—Ç–µ–ø–µ—Ä —Ü–µ –≥—Ä–∞ –ø—Ä–æ—Ç–∏ –±–æ—Ç—ñ–≤)
    const localModeBtn = document.getElementById('local-mode-btn');
    if (localModeBtn) {
        localModeBtn.addEventListener('click', () => {
            window.startLocalGame();
        });
    }
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ–Ω–ª–∞–π–Ω –≥—Ä–∏
    const onlineModeBtn = document.getElementById('online-mode-btn');
    if (onlineModeBtn) {
        onlineModeBtn.addEventListener('click', () => {
            window.startOnlineGame();
        });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ HTML
window.startLocalGame = function() {
    if (window.botGame) {
        window.botGame.startLocalBotGame();
    } else {
        window.botGame = new BotGame();
        window.botGame.startLocalBotGame();
    }
};

window.startOnlineGame = function() {
    if (window.game) {
        window.game.startOnlineMode();
    }
};

window.showGameRules = function() {
    if (window.gameUI) {
        window.gameUI.showGameRules();
    }
};

window.copyRoomCode = function(code) {
    GameUtils.copyToClipboard(code);
};

window.joinRoomByCode = function(code) {
    const roomCodeInput = document.getElementById('room-code');
    if (roomCodeInput) {
        roomCodeInput.value = code;
    }
};

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≥—Ä–∏
window.saveGameState = function(gameState) {
    try {
        localStorage.setItem('educationalPathGameState', JSON.stringify(gameState));
        console.log('üíæ –°—Ç–∞–Ω –≥—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', gameState);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≥—Ä–∏:', error);
    }
};

window.clearGameState = function() {
    try {
        localStorage.removeItem('educationalPathGameState');
        console.log('üóëÔ∏è –°—Ç–∞–Ω –≥—Ä–∏ –æ—á–∏—â–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≥—Ä–∏:', error);
    }
};

window.exitGame = function() {
    if (window.game) {
        // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –≥—Ä–∏
        window.clearGameState();
        
        // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –≤—ñ–¥ –∫—ñ–º–Ω–∞—Ç–∏ —è–∫—â–æ –æ–Ω–ª–∞–π–Ω
        if (window.game.isOnlineMode && window.game.socket) {
            window.game.socket.disconnect();
        }
        
        // –°–∫–∏–¥–∞—î–º–æ –≥—Ä—É
        window.game = new MultiplayerGame();
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        if (window.gameUI) {
            window.gameUI.showMainMenu();
        }
        
        console.log('üö™ –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é');
    }
};

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏ (—Ç—ñ–ª—å–∫–∏ –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏)
if (window.APP_CONFIG && !window.APP_CONFIG.isProduction) {
    window.debugGame = {
        addPoints: (playerId, points) => {
            if (window.game && window.game.players) {
                const player = window.game.players.find(p => p.id === playerId);
                if (player) {
                    window.game.updatePoints(player, points, `Debug: +${points} –û–û`);
                }
            }
        },
        
        movePlayer: (playerId, position) => {
            if (window.game && window.game.players) {
                const player = window.game.players.find(p => p.id === playerId);
                if (player) {
                    window.game.movePlayerTo(player, position);
                }
            }
        },
        
        skipTurn: (playerId) => {
            if (window.game && window.game.players) {
                const player = window.game.players.find(p => p.id === playerId);
                if (player) {
                    player.skipTurn = true;
                }
            }
        },
        
        endGame: () => {
            if (window.game) {
                window.game.endGame();
            }
        },
        
        showState: () => {
            if (window.game) {
                console.log('Game State:', {
                    players: window.game.players,
                    currentPlayerIndex: window.game.currentPlayerIndex,
                    gameActive: window.game.gameActive,
                    isOnlineMode: window.game.isOnlineMode,
                    roomId: window.game.roomId
                });
            }
        }
    };
    
    console.log('üîß –†–µ–∂–∏–º –≤—ñ–¥–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ window.debugGame –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.');
}

function setupMusicController() {
    const audioToggleBtn = document.getElementById('audio-toggle-btn');
    const audioPanel = document.getElementById('audio-panel');
    const audioIcon = document.getElementById('audio-icon');
    
    const musicToggleBtn = document.getElementById('music-toggle-btn');
    const musicSwitchBtn = document.getElementById('music-switch-btn');
    const musicVolumeSlider = document.getElementById('music-volume-slider');
    const musicVolumeText = document.getElementById('music-volume-text');
    const musicIcon = document.getElementById('music-icon');
    
    if (!audioToggleBtn || !audioPanel || !audioIcon) {
        console.log('–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –º—É–∑–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    // –ö–Ω–æ–ø–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è/–∑–∞–∫—Ä–∏—Ç—Ç—è –ø–∞–Ω–µ–ª—ñ
    audioToggleBtn.addEventListener('click', () => {
        if (audioPanel.classList.contains('hidden')) {
            audioPanel.classList.remove('hidden');
            audioIcon.textContent = 'üîá';
        } else {
            audioPanel.classList.add('hidden');
            audioIcon.textContent = 'üîä';
        }
    });
    
    // –ö–Ω–æ–ø–∫–∞ –≤–º–∏–∫–∞–Ω–Ω—è/–≤–∏–º–∏–∫–∞–Ω–Ω—è –º—É–∑–∏–∫–∏
    if (musicToggleBtn && musicIcon) {
        musicToggleBtn.addEventListener('click', () => {
            if (window.game && window.game.currentBackgroundMusic) {
                if (!window.game.currentBackgroundMusic.paused) {
                    window.game.stopBackgroundMusic();
                    musicIcon.textContent = 'üîá';
                } else {
                    window.game.startBackgroundMusic();
                    musicIcon.textContent = 'üéµ';
                }
            }
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—É–∑–∏–∫–∏
    if (musicSwitchBtn) {
        musicSwitchBtn.addEventListener('click', () => {
            if (window.game && window.game.switchBackgroundMusic) {
                window.game.switchBackgroundMusic();
            }
        });
    }
    
    // –°–ª–∞–π–¥–µ—Ä –≥—É—á–Ω–æ—Å—Ç—ñ
    if (musicVolumeSlider && musicVolumeText) {
        musicVolumeSlider.addEventListener('input', (e) => {
            const volume = e.target.value / 100;
            if (window.game && window.game.setBackgroundVolume) {
                window.game.setBackgroundVolume(volume);
            }
            musicVolumeText.textContent = e.target.value + '%';
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–≤—É–∫—ñ–≤
    const testSoundsBtn = document.getElementById('test-sounds-btn');
    if (testSoundsBtn) {
        testSoundsBtn.addEventListener('click', () => {
            console.log('üîä –¢–µ—Å—Ç—É—î–º–æ –∑–≤—É–∫–∏...');
            
            // –¢–µ—Å—Ç—É—î–º–æ –∑–≤—É–∫ –∫–ª—ñ–∫–∞–Ω–Ω—è
            const clickSound = new Audio('sound/button_click/click.mp3');
            clickSound.play().catch(e => console.log('–ü–æ–º–∏–ª–∫–∞ –∑–≤—É–∫—É –∫–ª—ñ–∫–∞–Ω–Ω—è:', e));
            
            setTimeout(() => {
                // –¢–µ—Å—Ç—É—î–º–æ –∑–≤—É–∫ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                const notificationSound = new Audio('sound/notification/notification.mp3');
                notificationSound.play().catch(e => console.log('–ü–æ–º–∏–ª–∫–∞ –∑–≤—É–∫—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', e));
            }, 500);
            
            setTimeout(() => {
                // –¢–µ—Å—Ç—É—î–º–æ –∑–≤—É–∫ —Ä—É—Ö—É —Ñ—ñ—à–∫–∏
                const chipMoveSound = new Audio('sound/chips/chip_move.mp3');
                chipMoveSound.play().catch(e => console.log('–ü–æ–º–∏–ª–∫–∞ –∑–≤—É–∫—É —Ä—É—Ö—É —Ñ—ñ—à–∫–∏:', e));
            }, 1000);
            
            setTimeout(() => {
                // –¢–µ—Å—Ç—É—î–º–æ –∑–≤—É–∫ –∫—É–±–∏–∫–∞
                const diceSound = new Audio('sound/dice/normal_dice.mp3');
                diceSound.play().catch(e => console.log('–ü–æ–º–∏–ª–∫–∞ –∑–≤—É–∫—É –∫—É–±–∏–∫–∞:', e));
            }, 1500);
        });
    }
    
    console.log('üéµ –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –º—É–∑–∏–∫–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
}

function setupGlobalSounds() {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–≤—É–∫ –∫–ª—ñ–∫–∞–Ω–Ω—è
    const clickSound = new Audio('sound/button_click/click.mp3');
    clickSound.preload = 'auto';
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–≤—É–∫ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    const notificationSound = new Audio('sound/notification/notification.mp3');
    notificationSound.preload = 'auto';
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫
    document.addEventListener('click', (e) => {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∫–Ω–æ–ø–∫–∞
        if (e.target.tagName === 'BUTTON' || e.target.closest('button')) {
            try {
                clickSound.currentTime = 0;
                clickSound.play().catch(err => {
                    console.log('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—É–∫ –∫–ª—ñ–∫–∞–Ω–Ω—è:', err);
                });
            } catch (err) {
                console.log('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É –∫–ª—ñ–∫–∞–Ω–Ω—è:', err);
            }
        }
    });
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                const target = mutation.target;
                if (target.classList.contains('modal-backdrop') && !target.classList.contains('hidden')) {
                    // –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –≤—ñ–¥–∫—Ä–∏–ª–æ—Å—è
                    try {
                        notificationSound.currentTime = 0;
                        notificationSound.play().catch(err => {
                            console.log('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—É–∫ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', err);
                        });
                    } catch (err) {
                        console.log('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', err);
                    }
                }
            }
        });
    });
    
    // –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞ –∑–º—ñ–Ω–∞–º–∏ –≤ –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–Ω–∞—Ö
    const modalElements = document.querySelectorAll('.modal-backdrop');
    modalElements.forEach(modal => {
        observer.observe(modal, { attributes: true });
    });
    
    console.log('üîä –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–≤—É–∫–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
}
